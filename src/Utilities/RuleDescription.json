[
    {
        "ruleId": "max-params",
        "title": "Parameter มากเกินไป",
        "description": "บังคับให้มีจำนวนสูงสุด (3) ของ Parameter ในการประกาศฟังก์ชัน",
        "message": "ฟังก์ชันที่มีจำนวน Parameter มากอาจทำให้ยากต่อการอ่านและเขียน เนื่องจากผู้เขียนต้องจำข้อมูลต่าง ๆ ของ Parameter เช่น ประเภทของ Parameter การเรียงลำดับ ดังนั้นการจำกัดจำนวน Parameter อาจจะช่วยให้สะดวกมากยิ่งขึ้น"
    },
    {
        "ruleId": "array-callback-return",
        "title": "คำสั่ง Return ใน Callback ไม่ได้กำหนดค่าที่จะ Return",
        "description": "บังคับการงานใช้คำสั่ง Callback ใน Array methods ต้องมีการ Return ค่ากลับ",
        "message": "การใช้คำสั่ง Return ใน Callback ของ Methods ที่ใช้กับ Array ต่าง ๆ ต้องมีการ Return ค่ากลับ"
    },
    {
        "ruleId": "constructor-super",
        "title": "ไม่มี super() ใน child class",
        "description": "ในการสืบทอด class จะต้องมีการใช้ super() ก่อนการ this และ return",
        "message": "การสืบทอดจาก derived class จำเป็นต้องมีการเรียกใช้ super() ใน Constructors ของ child class โดย super() จะต้องถูกเรียกก่อนที่จะใช้คำสั่ง this และก่อนที่ Constructors จะส่งคืนค่า การเรียกใช้ super()"
    },
    {
        "ruleId": "for-direction",
        "title": "เงื่อนไขการนับ Counter ใน for ไม่ถูกต้อง",
        "description": "บังคับให้เงื่อนไขคำสั่งของ for ในที่ถูกต้อง",
        "message": "ใน for มีการกำหนดเงื่อนไขการนับ Counter ไม่ถูกต้อง เช่น var i = 0; i > 10; i++ "
    },
    {
        "ruleId": "getter-return",
        "title": "ไม่มีคำสั่ง return ใน getters",
        "description": "บังคับให้มีคำสั่ง return ใน getters",
        "message": "การใช้คำสั่ง get จะต้องมีการ return"
    },
    {
        "ruleId": "no-async-promise-executor",
        "title": "async function ใช้ไม่ถูกต้อง",
        "description": "ไม่อนุญาตให้ใช้ async function เป็นตัวดำเนินการของ Promise",
        "message": "async function ไม่ควร เป็นตัวดำเนินการของ Promise"
    },
    {
        "ruleId": "no-await-in-loop",
        "title": "การใช้ await ไม่ถูกต้อง",
        "description": "ไม่อนุญาตให้ใช้ await ภายใน loop",
        "message": "await ไม่ควรใช้อยู่ใน loop"
    },
    {
        "ruleId": "no-class-assign",
        "title": "ห้ามกำหนดค่าใหม่ให้กับ class member",
        "description": "class ไม่สามารถกำหนดค่าตรง ๆ ได้",
        "message": "การกำหนดค่า class member ไม่ถูกต้อง"
    },
    {
        "ruleId": "no-compare-neg-zero",
        "title": "ค่าที่นำไปเทียบไม่ถูกต้อง",
        "description": "ห้าม ใช้ (-0) ในการนำไปเทียบค่า",
        "message": "ไม่ควรใช้ (-0) ในการนำไปเทียบค่า"
    },
    {
        "ruleId": "no-cond-assign",
        "title": "การกำหนดค่าภายใน condition ไม่ถูกต้อง",
        "description": "การกำหนดค่าภายใน condition ไม่ถูกต้อง เช่ร x = 0",
        "message": "เช็ค condition ว่ามีการใส่เครื่องหมาย หรือ การกำหนดค่าผิดหรือไม่ เช่น if (x = 0)"
    },
    {
        "ruleId": "no-const-assign",
        "title": "ไม่สามารถเปลี่ยนค่าให้กับตัวแปรที่ประกาศด้วย const",
        "description": "ไม่สามารถเปลี่ยนค่าให้กับตัวแปรที่ประกาศด้วย const",
        "message": "การกำหนดค่าให้กับตัวแปรที่ประกาศด้วย const อาจจะทำให้เกิด runtime error ได้",
        "solution": {
            "1": "ประกาศตัวแปรด้วย var หรือ let แทน"
        }
    },
    {
        "ruleId": "no-unused-vars",
        "title": "ไม่ควรกำหนดตัวแปรแต่ไม่เรียกใช้",
        "description": "ไม่ควรกำหนดตัวแปร หรือ ฟังก์ชัน แต่ไม่เรียกใช้",
        "message": "การประกาศตัวแปร หรือ ฟังก์ชัน แต่ไม่เรียกใช้หากในไฟล์นั้น ๆ มีโค้ดเยอะมาก ๆ ตัวแปรเหล่านี้อาจจะทำให้ผู้อ่านงงได้",
        "solution": {
            "1": "หากไม่ใช้แล้วควรลบตัวแปร หรือ ฟังก์ชันนั้นออก",
            "2": "Comment ตัวแปร หรือ ฟังก์ชันนั้นไว้ เผื่อใช้ในภายหลังแล้วอธิบายกำกับไว้"
        }
    },
    {
        "ruleId": "no-constant-condition",
        "title": "ไม่สามารถใช้ค่าคงที่เป็นเงื่อนไขได้",
        "description": "ไม่ควรใช้ค่าที่เป็นค่าคงที่ในการตั้งเป็นตัวแปรสำหรับ if while for เป็นต้น",
        "message": "การนำค่าที่เป็นคงที่มาเป็นเงื่อนไขสำหรับ if while for เป็นต้น จะก่อให้เกิดเงื่อนไขนั้น ไม่เกิดขึ้นหรือเกิดขึ้นตลอดหากเงื่อนไขเหล่านี้อยู่กับ while หรือ for อาจจะก่อให้เกิด loop ไม่รู้จบได้"
    },
    {
        "ruleId": "no-undef",
        "title": "การประกาศตัวแปรไม่ถูกต้อง",
        "description": "ไม่สามารถใช้ตัวแปรที่ยังไม่ได้ประกาศไว้ได้",
        "message": "ควรประกาศตัวแปรขึ้นต้นด้วย const , let หรือ var"
    },
    {
        "ruleId": "no-empty",
        "title": "ไม่ควรกำหนด statement เปล่า",
        "description": "",
        "message": ""
    },
    {
        "ruleId": "no-constant-binary-expression",
        "title": "ในเงื่อนไขที่เป็นค่าคงที่",
        "description": "ห้ามใช้เงื่อนไขที่เป็นค่าคงที่ใน statements เช่น if (true)",
        "message": "ห้ามใช้เงื่อนไขที่เป็นค่าคงที่ใน statements เช่น if (true)"
    },
    {
        "ruleId": "no-control-regex",
        "title": "ห้ามใช้ control characters ใน regex",
        "description": "ห้ามใช้ control characters (เช่น \\x1f) ใน regular expressions",
        "message": "ห้ามใช้ control characters (เช่น \\x1f) ใน regular expressions"
    },
    {
        "ruleId": "no-debugger",
        "title": "ห้ามใช้ debugger",
        "description": "ห้ามใช้คำสั่ง debugger ในโค้ด",
        "message": "พบการใช้ debugger หากไม่มีการใช้งานแล้วให้ ลบหรือคอมเมนต์ออก"
    },
    {
        "ruleId": "no-dupe-args",
        "title": "ชื่อพารามิเตอร์ซ้ำในฟังก์ชัน",
        "description": "ห้ามมีชื่อพารามิเตอร์ซ้ำในฟังก์ชัน",
        "message": "พบชื่อพารามิเตอร์ซ้ำในฟังก์ชัน"
    },
    {
        "ruleId": "no-dupe-keys",
        "title": "ชื่อ key ซ้ำใน object",
        "description": "ห้ามมีชื่อ key ซ้ำใน object literals",
        "message": "พบชื่อ key ซ้ำใน object"
    },
    {
        "ruleId": "no-duplicate-case",
        "title": "case ซ้ำใน switch",
        "description": "ห้ามมี case ซ้ำใน switch statements",
        "message": "พบ case ซ้ำใน switch"
    },
    {
        "ruleId": "no-empty",
        "title": "พบ statements ไม่มีการกำหนดการทำงาน",
        "description": "ห้ามมีstatementsที่ไม่มีการกำหนดใดๆ",
        "message": "พบ statements ไม่มีการกำหนดการทำงาน"
    },
    {
        "ruleId": "no-empty-character-class",
        "title": "ตัวอักษรใน regex ว่างเปล่า",
        "description": "ห้ามมี class ว่างเปล่าใน regular expressions",
        "message": "พบ class ว่างเปล่าใน regex"
    },
    {
        "ruleId": "no-ex-assign",
        "title": "ห้ามกำหนดค่าใหม่ให้กับ exception",
        "description": "ห้ามกำหนดค่าใหม่ให้กับตัวแปร exception ใน catch block",
        "message": "ห้ามการกำหนดค่าใหม่ให้กับ exception"
    },
    {
        "ruleId": "no-extra-boolean-cast",
        "title": "การ cast เป็น boolean ที่เกินจำเป็น",
        "description": "ห้ามใช้ boolean cast ที่ไม่จำเป็น เช่น !!a",
        "message": "พบการ cast เป็น boolean ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-extra-parens",
        "title": "วงเล็บเกินจำเป็น",
        "description": "ห้ามใช้วงเล็บที่เกินจำเป็น",
        "message": "พบวงเล็บที่เกินจำเป็น"
    },
    {
        "ruleId": "no-extra-semi",
        "title": "semicolon เกินจำเป็น",
        "description": "ห้ามใช้ semicolon ที่เกินจำเป็น",
        "message": "พบ semicolon ที่เกินจำเป็น"
    },
    {
        "ruleId": "no-func-assign",
        "title": "การกำหนดค่าใหม่ให้กับฟังก์ชัน",
        "description": "ห้ามกำหนดค่าใหม่ให้กับฟังก์ชัน",
        "message": "ห้ามการกำหนดค่าใหม่ให้กับฟังก์ชัน"
    },
    {
        "ruleId": "no-inner-declarations",
        "title": "ห้ามประกาศฟังก์ชันหรือ variables ในบล็อก",
        "description": "ห้ามประกาศฟังก์ชันหรือ variables ในบล็อก (เช่น if หรือ for)",
        "message": "ห้ามประกาศฟังก์ชันหรือ variables ในบล็อก (เช่น if หรือ for)"
    },
    {
        "ruleId": "no-invalid-regexp",
        "title": "regular expressions ไม่ถูกต้อง",
        "description": "ห้ามใช้ regular expressions ที่ไม่ถูกต้อง",
        "message": "พบ regular expressions ไม่ถูกต้อง"
    },
    {
        "ruleId": "no-irregular-whitespace",
        "title": "space ที่ไม่ปกติ",
        "description": "ห้ามใช้ช่องว่างที่ไม่ปกติในโค้ด",
        "message": "ห้ามใช้ช่องว่างที่ไม่ปกติในโค้ด เช่น non-breaking space (NBSP) หรือ zero-width space (ZWSP)"
    },
    {
        "ruleId": "no-misleading-character-class",
        "title": "การใช้ class ของตัวอักษรที่สับสนใน regex",
        "description": "ห้ามใช้ character class ที่สับสน เช่น /[\\d.]/ ซึ่งอาจทำให้เข้าใจผิดว่าตัวอักษร 'd' และจุด '.' ใน character class",
        "message": "ห้ามใช้ character class ที่สับสน เช่น /[\\d.]/ ซึ่งอาจทำให้เข้าใจผิดว่าตัวอักษร 'd' และจุด '.' ใน character class"
    },
    {
        "ruleId": "accessor-pairs",
        "title": "คู่ของ Accessor",
        "description": "บังคับให้มี getter และ setter pairs ในอ็อบเจกต์และคลาส",
        "message": "การใช้ getter เพื่ออ่านค่าคุณสมบัติและ setter เพื่อกำหนดค่าคุณสมบัติช่วยให้ควบคุมการเข้าถึงข้อมูลในอ็อบเจกต์หรือคลาสได้อย่างเหมาะสมและปลอดภัย"
    },
    {
        "ruleId": "arrow-body-style",
        "title": "รูปแบบของลำดับที่ใช้ฟังก์ชันอาร์โรว์",
        "description": "บังคับให้ใช้วงเล็บปีกการอบตัวแปรในลำดับของฟังก์ชันอาร์โรว์",
        "message": "การใช้วงเล็บปีกการอบตัวแปรในลำดับของฟังก์ชันอาร์โรว์ช่วยให้ระเบียบเรียบร้อยและชัดเจน"
    },
    {
        "ruleId": "block-scoped-var",
        "title": "บังคับใช้ตัวแปรในขอบเขตของบล็อก",
        "description": "กฎนี้บังคับให้ใช้ตัวแปรภายในขอบเขตที่กำหนดไว้เท่านั้น มันจะสร้างคำเตือนเมื่อมีการใช้ตัวแปรนอกขอบเขตของบล็อกที่กำหนดไว้ ซึ่งคล้ายกับขอบเขตบล็อกแบบ C-style",
        "message": "ควรใช้ตัวแปรในขอบเขตของบล็อกที่กำหนดไว้"
    },
    {
        "ruleId": "camelcase",
        "title": "บังคับใช้การตั้งชื่อตัวแปรแบบ CamelCase",
        "description": "กฎนี้บังคับให้ใช้รูปแบบการตั้งชื่อตัวแปรแบบ CamelCase การตั้งชื่อตาม CamelCase หมายถึงการเขียนตัวแปรที่มีคำแรกเป็นตัวพิมพ์เล็ก และคำต่อมาจะขึ้นต้นด้วยตัวพิมพ์ใหญ่โดยไม่มีช่องว่างหรือขีดล่างระหว่างคำ",
        "message": "ควรตั้งชื่อตัวแปรในรูปแบบ CamelCase"
    },
    {
        "ruleId": "capitalized-comments",
        "title": "ควรใช้ตัวพิมพ์ใหญ่ตัวอักษรตัวแรกของคอมเมนต์",
        "description": "กฎนี้กำหนดว่าการใช้ตัวพิมพ์ใหญ่หรือตัวพิมพ์เล็กในตัวอักษรแรกของคอมเมนต์ การเลือกใช้รูปแบบความคิดเห็นที่เหมาะสมสามารถช่วยให้โค้ดอ่านง่ายและง่ายต่อการบำรุงรักษาโปรเจคได้ดีขึ้น",
        "message": "คอมเมนต์ควรเริ่มต้นด้วยตัวพิมพ์ใหญ่หรือไม่ตามที่ระบุ"
    },
    {
        "ruleId": "class-methods-use-this",
        "title": "บังคับการใช้ `this` ในเมทอดของคลาส",
        "description": "กฎนี้บังคับให้เมทอดของคลาสต้องใช้คีย์เวิร์ด `this` ในเมทอดนั้น ๆ เพื่อให้แน่ใจว่าการใช้ `this` เป็นไปตามที่กำหนด",
        "message": "เมทอดของคลาสควรใช้คีย์เวิร์ด `this` เพื่อเข้าถึงข้อมูลที่เป็น instance ของอ็อบเจกต์"
    },
    {
        "ruleId": "complexity",
        "title": "บังคับการใช้ซิโคลเมติกคอมเพล็กซิตี้สูงสุด",
        "description": "กฎนี้บังคับการใช้ซิโคลเมติกคอมเพล็กซิตี้สูงสุดที่อนุญาตในโปรแกรม ซิโคลเมติกคอมเพล็กซิตี้มีหน้าที่วัดจำนวนเส้นทางที่อิสระต่อกันผ่านโค้ดซอร์สของโปรแกรม",
        "message": "ความซับซ้อนของฟังก์ชันหรือเมทอดเกินเกินขอบเขตที่อนุญาต (default คือ 20 )"
    },
    {
        "ruleId": "consistent-return",
        "title": "การระบุค่าที่ส่งกลับให้ชัดเจน",
        "description": "ให้แน่ใจว่าคำสั่ง return ในฟังก์ชันจะต้องมีการระบุค่าที่ชัดเจนเพื่อให้ไม่เกิดความผิดพลาด",
        "message": "ฟังก์ชันจะต้องมีการระบุค่าที่ชัดเจนเพื่อให้ไม่เกิดความผิดพลาด"
    },
    {
        "ruleId": "consistent-this",
        "title": "บังคับให้มีการตั้งชื่อตัวแปรที่ใช้ในการใช้แทน 'this' ",
        "description": "ควรมีการใช้มาตรฐานในการตั้งชื่อเมื่อจับ context ปัจจุบันของการทำงาน ('this') ใน JavaScript",
        "message": "ใช้ ตัวแปรที่สร้างขึ้นมา เพื่อจับ 'this' เช่น   var self = $(this); / self.addClass('clicked'); "
    },
    {
        "ruleId": "curly",
        "title": "บังคับให้ใช้เครื่องหมายวงเล็บปีกกาในทุกคำสั่งควบคุม",
        "description": "บังคับให้ใช้เครื่องหมายวงเล็บปีกกากับบล็อกคำสั่งในทุกคำสั่งควบคุมเพื่อเพิ่มความชัดเจนของโค้ดและลดข้อผิดพลาด",
        "message": "ใช้เครื่องหมายวงเล็บปีกกาสำหรับบล็อกคำสั่งในทุกคำสั่งควบคุม"
    },
    {
        "ruleId": "default-case",
        "title": "ตรวจสอบ swtich statement มี default case หรือไม่",
        "description": "ตรวจสอบ swtich statement มี default case หรือไม่เพื่อให้โค้ดจัดการกับทุกกรณีที่เป็นไปได้ และช่วยป้องกันข้อผิดพลาดหากมีค่าใหม่ที่ไม่ได้ระบุ",
        "message": "ฟังชัน switch-case จำเป็นต้องมีdefault case"
    },
    {
        "ruleId": "default-case-last",
        "title": "บังคับให้ default case ต้องอยู่ท้ายสุดของ switch statement",
        "description": "บังคับให้ default case ต้องอยู่ท้ายสุดของ switch statement เพื่อให้โค้ดอ่านง่ายเป็นระเบียบและช่วยป้องกันข้อผิดพลาด",
        "message": "default case ต้องอยู่ท้ายสุดของ switch statement "
    },
    {
        "ruleId": "default-param-last",
        "title": "บังคับให้พารามิเตอร์ที่มีค่าเริ่มต้นต้องอยู่ท้ายสุดของฟังก์ชัน",
        "description": "บังคับให้พารามิเตอร์ที่มีค่าเริ่มต้น (default parameter) ต้องอยู่ท้ายสุดของฟังก์ชัน เพื่อป้องกันความสับสนและข้อผิดพลาดที่อาจเกิดขึ้นในการเรียกใช้งาน",
        "message": "พารามิเตอร์ที่มีค่าเริ่มต้นต้องอยู่ท้ายสุดของฟังก์ชัน"
    },
    {
        "ruleId": "dot-notation",
        "title": "บังคับให้ใช้ dot notation ในการเข้าถึง property ของ object",
        "description": "บังคับให้ใช้ dot notation (`obj.prop`) แทน bracket notation (`obj['prop']`) เมื่อสามารถทำได้ เพื่อให้โค้ดอ่านง่ายและลดข้อผิดพลาด",
        "message": "ควรใช้ dot notation ในการเข้าถึง property ของ object หากเป็นไปได้"
    },
    {
        "ruleId": "eqeqeq",
        "title": "บังคับให้ใช้การเปรียบเทียบแบบเข้มงวด (=== และ !==)",
        "description": "บังคับให้ใช้ตัวดำเนินการเปรียบเทียบแบบเข้มงวด (`===` และ `!==`) แทนการเปรียบเทียบแบบหลวม (`==` และ `!=`) เพื่อลดข้อผิดพลาดที่เกิดจากการเปรียบเทียบค่าต่างประเภทกัน",
        "message": "ควรใช้ === และ !== แทน == และ !="
    },
    {
        "ruleId": "func-name-matching",
        "title": "บังคับให้ชื่อฟังก์ชันตรงกับชื่อของตัวแปรที่กำหนดให้",
        "description": "บังคับให้ชื่อของฟังก์ชันตรงกับชื่อของตัวแปรที่กำหนดค่าให้ เพื่อลดความสับสนและทำให้โค้ดอ่านง่ายขึ้น",
        "message": "ชื่อของฟังก์ชันควรตรงกับชื่อของตัวแปรที่กำหนดให้"
    },
    {
        "ruleId": "func-names",
        "title": "บังคับให้มีชื่อฟังก์ชันเสมอ",
        "description": "บังคับให้ฟังก์ชันต้องมีชื่อ (named function) แทนการใช้ anonymous function เพื่อช่วยให้ดีบั๊กง่ายขึ้นและทำให้ stack trace อ่านง่ายขึ้น",
        "message": "ควรกำหนดชื่อให้กับฟังก์ชันเสมอ"
    },
    {
        "ruleId": "func-style",
        "title": "กำหนดรูปแบบการประกาศฟังก์ชันให้เป็นแบบที่กำหนด",
        "description": "บังคับให้ใช้รูปแบบการประกาศฟังก์ชันที่สม่ำเสมอ เช่น ใช้ function declaration (`function foo() {}`) หรือ function expression (`const foo = function() {};`) ตามที่กำหนด เพื่อความเป็นระเบียบและอ่านง่าย",
        "message": "ควรใช้รูปแบบการประกาศฟังก์ชันให้สอดคล้องกันตามที่กำหนด"
    },
    {
        "ruleId": "grouped-accessor-pairs",
        "title": "บังคับให้ getter และ setter ของ object อยู่ติดกัน",
        "description": "บังคับให้กำหนด getter และ setter ของ property ภายใน object ให้ถูกจัดกลุ่มอยู่ติดกัน เพื่อให้โค้ดอ่านง่ายและเข้าใจโครงสร้างของ object ได้ดีขึ้น",
        "message": "ควรจัดกลุ่ม getter และ setter ของ property ให้อยู่ติดกัน"
    },
    {
        "ruleId": "guard-for-in",
        "title": "บังคับให้มีการตรวจสอบค่าใน for...in loop",
        "description": "บังคับให้ใช้ `hasOwnProperty()` หรือกลไกอื่นในการตรวจสอบค่าเมื่อใช้ `for...in` loop เพื่อลดความเสี่ยงจากการวนลูปผ่าน prototype chain โดยไม่ได้ตั้งใจ",
        "message": "ควรตรวจสอบค่าใน for...in loop ด้วย hasOwnProperty() หรือวิธีอื่น"
    },
    {
        "ruleId": "id-denylist",
        "title": "ห้ามใช้ตัวแปรหรือชื่อฟังก์ชันที่อยู่ในรายการต้องห้าม",
        "description": "บังคับให้หลีกเลี่ยงการใช้ตัวแปรหรือชื่อฟังก์ชันที่อยู่ในรายการต้องห้าม (denylist) เพื่อลดความสับสน ป้องกันข้อผิดพลาด และเพิ่มความปลอดภัยของโค้ด",
        "message": "ห้ามใช้ชื่อตัวแปรหรือฟังก์ชันที่อยู่ในรายการต้องห้าม"
    },
    {
        "ruleId": "id-length",
        "title": "กำหนดความยาวของชื่อไอดี (ตัวแปร ฟังก์ชัน ฯลฯ)",
        "description": "บังคับให้มีความยาวของชื่อไอดี (ตัวแปร, ฟังก์ชัน, คลาส ฯลฯ) ตามที่กำหนด เพื่อทำให้โค้ดอ่านง่ายและเข้าใจได้ดียิ่งขึ้น โดยสามารถกำหนดความยาวที่ต่ำสุดและสูงสุด",
        "message": "ควรกำหนดชื่อไอดีที่มีความยาวตามที่กำหนด"
    },
    {
        "ruleId": "id-match",
        "title": "บังคับให้ชื่อตัวแปรหรือฟังก์ชันตรงตามรูปแบบที่กำหนด",
        "description": "บังคับให้ชื่อตัวแปรหรือฟังก์ชันต้องตรงตามรูปแบบ (เช่น regular expression) ที่กำหนดในโค้ด เพื่อรักษาความสอดคล้องของชื่อและป้องกันข้อผิดพลาดที่อาจเกิดขึ้นจากชื่อที่ไม่เหมาะสม",
        "message": "ชื่อตัวแปรหรือฟังก์ชันต้องตรงตามรูปแบบที่กำหนด"
    },
    {
        "ruleId": "init-declarations",
        "title": "บังคับให้ตัวแปรทุกตัวต้องมีการกำหนดค่าเริ่มต้น",
        "description": "บังคับให้ตัวแปรที่ถูกประกาศต้องมีการกำหนดค่าเริ่มต้น (initialization) ทันทีเพื่อหลีกเลี่ยงปัญหาจากการใช้ตัวแปรที่ยังไม่ได้กำหนดค่าและทำให้โค้ดมีความชัดเจนขึ้น",
        "message": "ควรกำหนดค่าเริ่มต้นให้กับตัวแปรทุกตัวที่ประกาศ"
    },
    {
        "ruleId": "logical-assignment-operators",
        "title": "บังคับให้ใช้ logical assignment operators ในการดำเนินการเชิงตรรกะ",
        "description": "บังคับให้ใช้ logical assignment operators (`&&=`, `||=`, `??=`) แทนการใช้ logical operators แบบเดิม (`&&`, `||`, `??`) ตามด้วยการกำหนดค่า เพื่อทำให้โค้ดสั้นและอ่านง่ายขึ้น",
        "message": "ควรใช้ logical assignment operators แทนการใช้ logical operators แบบเดิม"
    },
    {
        "ruleId": "max-classes-per-file",
        "title": "จำกัดจำนวนคลาสที่สามารถประกาศในไฟล์เดียว",
        "description": "บังคับให้จำนวนคลาสที่ประกาศในไฟล์หนึ่งๆ ไม่เกินจำนวนที่กำหนด เพื่อรักษาความเป็นระเบียบและการแยกโค้ดให้ดีขึ้น โดยปกติจะควรมีคลาสเดียวในไฟล์เดียว",
        "message": "ไฟล์ไม่ควรมีคลาสเกินจำนวนที่กำหนด"
    },
    {
        "ruleId": "max-depth",
        "title": "จำกัดความลึกของการซ้อนโครงสร้าง",
        "description": "บังคับให้ความลึกของโครงสร้าง (เช่น การซ้อน `if`, `for`, หรือ `while`) ไม่เกินจำนวนที่กำหนด เพื่อให้โค้ดอ่านง่ายและเข้าใจได้ง่ายขึ้น โดยป้องกันการซ้อนลึกเกินไปที่อาจทำให้โค้ดยากต่อการดูแลรักษา",
        "message": "ควรหลีกเลี่ยงการซ้อนโครงสร้างลึกเกินไป"
    },
    {
        "ruleId": "max-lines",
        "title": "จำกัดจำนวนบรรทัดในไฟล์",
        "description": "บังคับให้จำนวนบรรทัดในไฟล์ไม่เกินจำนวนที่กำหนด เพื่อให้โค้ดไม่ยาวเกินไปและง่ายต่อการอ่าน และเพื่อป้องกันไม่ให้ไฟล์มีความซับซ้อนเกินไปในการดูแลรักษา",
        "message": "ไฟล์ไม่ควรมีจำนวนบรรทัดเกินที่กำหนด"
    },
    {
        "ruleId": "max-lines-per-function",
        "title": "จำกัดจำนวนบรรทัดในฟังก์ชัน",
        "description": "บังคับให้ฟังก์ชันมีจำนวนบรรทัดไม่เกินที่กำหนด เพื่อให้โค้ดในฟังก์ชันอ่านง่ายและเข้าใจได้ดีขึ้น โดยป้องกันการเขียนฟังก์ชันที่ยาวเกินไปซึ่งอาจทำให้ยากต่อการดูแลรักษาและทดสอบ",
        "message": "ฟังก์ชันไม่ควรมีจำนวนบรรทัดเกินที่กำหนด"
    },
    {
        "ruleId": "max-nested-callbacks",
        "title": "จำกัดจำนวนการซ้อน callback function",
        "description": "บังคับให้จำนวนการซ้อน callback function (เช่น การใช้ฟังก์ชันในฟังก์ชัน) ไม่เกินที่กำหนด เพื่อให้โค้ดอ่านง่ายและเข้าใจได้ดีขึ้น โดยป้องกันไม่ให้โค้ดซับซ้อนเกินไปซึ่งอาจทำให้ยากต่อการดูแลรักษา",
        "message": "ควรหลีกเลี่ยงการซ้อน callback function ลึกเกินไป"
    },
    {
        "ruleId": "max-statements",
        "title": "จำกัดจำนวนคำสั่งในฟังก์ชัน",
        "description": "บังคับให้ฟังก์ชันมีจำนวนคำสั่งไม่เกินที่กำหนด เพื่อทำให้โค้ดสั้น กระชับ และอ่านง่าย โดยการลดความซับซ้อนของฟังก์ชันและเพิ่มความสามารถในการดูแลรักษา",
        "message": "ฟังก์ชันไม่ควรมีจำนวนคำสั่งเกินที่กำหนด"
    },
    {
        "ruleId": "new-cap",
        "title": "บังคับให้ใช้ตัวพิมพ์ใหญ่ในชื่อคลาสเมื่อสร้างอินสแตนซ์ใหม่",
        "description": "บังคับให้ใช้ตัวพิมพ์ใหญ่ (Uppercase) สำหรับชื่อคลาสเมื่อสร้างอินสแตนซ์ใหม่ ด้วยการใช้ `new` เพื่อให้สอดคล้องกับแนวปฏิบัติที่แนะนำใน JavaScript ที่ระบุว่าชื่อคลาสควรเริ่มต้นด้วยตัวพิมพ์ใหญ่",
        "message": "ชื่อของคลาสที่ใช้กับ `new` ควรเริ่มต้นด้วยตัวพิมพ์ใหญ่"
    },
    {
        "ruleId": "no-alert",
        "title": "ห้ามใช้คำสั่ง alert, confirm, และ prompt",
        "description": "ห้ามใช้คำสั่ง `alert`, `confirm`, และ `prompt` เนื่องจากอาจทำให้ประสบการณ์ผู้ใช้ไม่ดี และไม่เหมาะสมในโค้ดที่ใช้ในโปรดักชัน ควรใช้วิธีการแสดงผลอื่นๆ เช่น การแสดงข้อความบน UI แทน",
        "message": "ห้ามใช้ `alert`, `confirm`, และ `prompt` ในโค้ด"
    },
    {
        "ruleId": "no-array-constructor",
        "title": "ห้ามใช้ Array constructor",
        "description": "ห้ามใช้ `Array` constructor (`new Array()`) ในการสร้างอาร์เรย์ เนื่องจากอาจทำให้เกิดความไม่ชัดเจนเกี่ยวกับขนาดของอาร์เรย์ที่ต้องการสร้าง และอาจทำให้เกิดพฤติกรรมที่ไม่คาดคิดได้ ควรใช้ลิสต์แบบ literal (`[]`) แทน",
        "message": "ควรหลีกเลี่ยงการใช้ `new Array()` และใช้ `[]` แทน"
    },
    {
        "ruleId": "no-bitwise",
        "title": "ห้ามใช้ตัวดำเนินการ bitwise",
        "description": "ห้ามใช้ตัวดำเนินการ bitwise (`&`, `|`, `^`, `~`, `<<`, `>>`, `>>>`) ในโค้ด เนื่องจากตัวดำเนินการเหล่านี้อาจทำให้โค้ดอ่านยากและเข้าใจยาก โดยเฉพาะในกรณีที่ไม่ใช่การทำงานกับข้อมูลในระดับต่ำ เช่นการทำงานกับบิตในตัวแปรแบบ integer",
        "message": "ควรหลีกเลี่ยงการใช้ตัวดำเนินการ bitwise"
    },
    {
        "ruleId": "no-caller",
        "title": "ห้ามใช้ `arguments.callee`",
        "description": "ห้ามใช้ `arguments.callee` เนื่องจากมันทำให้โค้ดไม่สามารถทำงานได้ในบางกรณี เช่น เมื่อใช้ในโหมด strict และทำให้โค้ดอ่านยากและบำรุงรักษายาก ควรใช้ฟังก์ชันแบบธรรมดาหรือฟังก์ชันที่สามารถเรียกตัวเองได้โดยใช้ชื่อฟังก์ชัน",
        "message": "ห้ามใช้ `arguments.callee` ในโค้ด"
    },
    {
        "ruleId": "no-case-declarations",
        "title": "ห้ามประกาศตัวแปรใน `case` ของ `switch` statement",
        "description": "ห้ามประกาศตัวแปรใน `case` ของ `switch` statement เนื่องจากอาจทำให้เกิดปัญหาด้านการควบคุมโครงสร้างการทำงานของ `switch` และทำให้เกิดผลลัพธ์ที่ไม่คาดคิด เช่น ตัวแปรที่ประกาศใน `case` อาจจะไม่สามารถเข้าถึงได้ในบางกรณี",
        "message": "ห้ามประกาศตัวแปรใน `case` ของ `switch` statement"
    },
    {
        "ruleId": "no-case-declarations",
        "title": "ห้ามประกาศตัวแปรใน `case` ของ `switch` statement",
        "description": "ห้ามประกาศตัวแปรใน `case` ของ `switch` statement เนื่องจากการประกาศตัวแปรใน `case` อาจทำให้เกิดปัญหาด้านขอบเขตของตัวแปร (scope) และทำให้เกิดผลลัพธ์ที่ไม่คาดคิด เช่น ตัวแปรที่ประกาศใน `case` อาจจะไม่สามารถเข้าถึงได้ในบางกรณีหรือเกิดการกำหนดค่าใหม่ซ้ำ",
        "message": "ห้ามประกาศตัวแปรใน `case` ของ `switch` statement"
    },
    {
        "ruleId": "no-console",
        "title": "ห้ามใช้ `console`",
        "description": "ห้ามใช้คำสั่ง `console.log()`, `console.error()`, `console.warn()` และคำสั่ง `console` อื่นๆ เนื่องจากมันไม่เหมาะสมในโค้ดที่ใช้ในโปรดักชัน เพราะมันอาจทำให้ข้อมูลส่วนตัวหรือข้อมูลที่สำคัญหลุดออกไป ควรใช้เครื่องมือที่เหมาะสมในการดีบักหรือจัดการข้อผิดพลาดแทน",
        "message": "ห้ามใช้ `console` ในโค้ด"
    },
    {
        "ruleId": "no-continue",
        "title": "ห้ามใช้คำสั่ง `continue`",
        "description": "ห้ามใช้คำสั่ง `continue` ในลูป เนื่องจากการใช้ `continue` อาจทำให้โค้ดอ่านยากและทำให้โครงสร้างของลูปซับซ้อนขึ้น การใช้ `continue` อาจทำให้ผู้อ่านโค้ดสับสนเกี่ยวกับการควบคุมการไหลของโปรแกรม ควรปรับโค้ดเพื่อหลีกเลี่ยงการใช้คำสั่ง `continue`",
        "message": "ห้ามใช้คำสั่ง `continue` ในลูป"
    },
    {
        "ruleId": "no-delete-var",
        "title": "ห้ามใช้ `delete` กับตัวแปร",
        "description": "ห้ามใช้คำสั่ง `delete` กับตัวแปร เนื่องจากมันอาจทำให้โค้ดไม่สามารถทำงานได้ตามที่คาดหวัง และไม่สามารถใช้ได้ในบางกรณี (เช่น ตัวแปรที่ถูกประกาศใน `var`, `let`, หรือ `const`) คำสั่ง `delete` ควรใช้กับ property ของอ็อบเจ็กต์เท่านั้น",
        "message": "ห้ามใช้ `delete` กับตัวแปร"
    },
    {
        "ruleId": "no-div-regex",
        "title": "ห้ามใช้การหารใน regular expressions",
        "description": "ห้ามใช้เครื่องหมายการหาร (`/`) ใน regular expressions เนื่องจากมันอาจทำให้เกิดความสับสน เนื่องจาก `/` เป็นตัวแบ่งสำหรับ regular expressions และยังใช้ในการหารใน JavaScript ควรหลีกเลี่ยงการใช้เครื่องหมายหารใน regex หรือใช้วิธีที่เหมาะสมในการแทนที่",
        "message": "ห้ามใช้เครื่องหมาย `div` (/) ใน regular expressions"
    },
    {
        "ruleId": "no-else-return",
        "title": "ห้ามใช้ `else` หลังจาก `return`",
        "description": "ห้ามใช้ `else` หลังจากคำสั่ง `return` เนื่องจากโค้ดที่มี `return` แล้วจะไม่ไปดำเนินการในส่วนที่ตามมาใน `else` อยู่แล้ว การใช้ `else` อาจทำให้โค้ดยาวและซับซ้อนเกินไป ควรปรับให้โค้ดกระชับและอ่านง่ายขึ้นโดยการย้าย `return` ออกมาจาก `else`",
        "message": "ห้ามใช้ `else` หลังจาก `return`"
    },
    {
        "ruleId": "no-empty",
        "title": "ห้ามใช้บล็อกโค้ดที่ว่างเปล่า",
        "description": "ห้ามใช้บล็อกโค้ดที่ว่างเปล่า (`{}`) โดยไม่มีการดำเนินการใดๆ ภายใน เนื่องจากมันอาจทำให้โค้ดดูสับสนและยากต่อการเข้าใจ ควรลบหรือเพิ่มโค้ดในบล็อกดังกล่าวหากมีความจำเป็น",
        "message": "ห้ามใช้บล็อกโค้ดที่ว่างเปล่า"
    },
    {
        "ruleId": "no-empty-function",
        "title": "ห้ามใช้ฟังก์ชันที่ไม่มีเนื้อหาภายใน",
        "description": "ห้ามใช้ฟังก์ชันที่ไม่มีเนื้อหาภายใน (ฟังก์ชันที่ไม่มีการดำเนินการใดๆ) เนื่องจากฟังก์ชันที่ไม่มีการดำเนินการอาจทำให้โค้ดไม่ชัดเจนและไม่สามารถใช้งานได้จริง ควรเพิ่มการดำเนินการภายในฟังก์ชันหรือลบฟังก์ชันที่ไม่มีการใช้งานออกไป",
        "message": "ห้ามใช้ฟังก์ชันที่ไม่มีเนื้อหาภายใน"
    },
    {
        "ruleId": "no-empty-static-block",
        "title": "ห้ามใช้ static block ที่ว่างเปล่า",
        "description": "ห้ามใช้ `static` block ที่ไม่มีการดำเนินการใดๆ ภายใน เพราะมันจะทำให้โค้ดดูสับสนและไม่จำเป็น ควรลบ `static` block ที่ว่างเปล่าหรือเพิ่มการดำเนินการที่จำเป็นใน block นั้น",
        "message": "ห้ามใช้ `static` block ที่ว่างเปล่า"
    },
    {
        "ruleId": "no-eq-null",
        "title": "ห้ามใช้การเปรียบเทียบกับ `null` โดยใช้ `==` หรือ `!=`",
        "description": "ห้ามใช้การเปรียบเทียบกับ `null` โดยใช้ `==` หรือ `!=` เพราะมันอาจทำให้เกิดผลลัพธ์ที่ไม่คาดคิดเนื่องจากการทำงานของ `==` ที่มีการแปลงประเภทอัตโนมัติ ควรใช้ `===` หรือ `!==` เพื่อให้การเปรียบเทียบเป็นไปอย่างชัดเจนและปลอดภัย",
        "message": "ควรใช้ `===` หรือ `!==` แทนการใช้ `==` หรือ `!=` เมื่อเปรียบเทียบกับ `null`"
    },
    {
        "ruleId": "no-eval",
        "title": "ห้ามใช้คำสั่ง `eval()`",
        "description": "ห้ามใช้คำสั่ง `eval()` เนื่องจากมันสามารถทำให้โค้ดมีความเสี่ยงด้านความปลอดภัย เช่น การประมวลผลโค้ดที่ไม่รู้จัก และทำให้การดีบักและการดูแลรักษาโค้ดยากขึ้น ควรหลีกเลี่ยงการใช้ `eval()` และใช้วิธีที่ปลอดภัยกว่าในการดำเนินการ",
        "message": "ห้ามใช้คำสั่ง `eval()`"
    },
    {
        "ruleId": "no-extend-native",
        "title": "ห้ามขยาย (extend) ฟังก์ชันหรืออ็อบเจ็กต์ใน JavaScript",
        "description": "ห้ามขยายฟังก์ชันหรืออ็อบเจ็กต์ใน JavaScript เช่น `Array.prototype` หรือ `Object.prototype` เนื่องจากมันอาจทำให้เกิดผลกระทบที่ไม่คาดคิดหรือทำให้โค้ดไม่สามารถทำงานได้ในบางกรณี การขยายอ็อบเจ็กต์พื้นฐานอาจทำให้เกิดการขัดแย้งกับโค้ดอื่นที่ใช้งานเช่นกัน",
        "message": "ห้ามขยายฟังก์ชันหรืออ็อบเจ็กต์พื้นฐานใน JavaScript"
    },
    {
        "ruleId": "no-extra-bind",
        "title": "ห้ามใช้การผูกฟังก์ชันซ้ำ (extra bind)",
        "description": "ห้ามใช้การผูกฟังก์ชันซ้ำ เช่น การใช้ `.bind()` ที่ไม่จำเป็น เนื่องจากมันอาจทำให้โค้ดยุ่งเหยิงและเพิ่มภาระในการทำงานให้กับโปรแกรม ควรใช้การผูกฟังก์ชันเพียงครั้งเดียวเท่าที่จำเป็น",
        "message": "ห้ามใช้การผูกฟังก์ชันซ้ำที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-extra-boolean-cast",
        "title": "ห้ามใช้การแปลงเป็น boolean ที่ไม่จำเป็น",
        "description": "ห้ามใช้การแปลงเป็น boolean ที่ไม่จำเป็น เช่น การใช้ `Boolean()` หรือ `!!` ในการแปลงค่าที่เป็น boolean อยู่แล้ว ซึ่งอาจทำให้โค้ดดูซ้ำซ้อนและยากต่อการเข้าใจ ควรหลีกเลี่ยงการแปลงค่าเป็น boolean หากค่าดังกล่าวสามารถใช้ในการเปรียบเทียบหรือเช็คได้โดยตรง",
        "message": "ห้ามใช้การแปลงเป็น boolean ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-extra-label",
        "title": "ห้ามใช้ label ที่ไม่จำเป็นในโค้ด",
        "description": "ห้ามใช้ label ที่ไม่จำเป็น เช่น การใช้ `label` ใน `break` หรือ `continue` เนื่องจากมันอาจทำให้โค้ดซับซ้อนและยากต่อการอ่านและดูแลรักษา ควรหลีกเลี่ยงการใช้ label หากไม่จำเป็นจริงๆ",
        "message": "ห้ามใช้ label ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-global-assign",
        "title": "ห้ามกำหนดค่าตัวแปรทั่วโลก",
        "description": "ห้ามกำหนดค่าตัวแปรในระดับทั่วโลกโดยตรง เช่น การกำหนดค่าตัวแปรที่อยู่ใน `window` หรือ `global` เนื่องจากมันอาจทำให้เกิดผลกระทบที่ไม่คาดคิดในโค้ดที่ใช้ตัวแปรเดียวกัน ควรใช้วิธีการกำหนดค่าภายในฟังก์ชันหรือบล็อกที่มีขอบเขตชัดเจน",
        "message": "ห้ามกำหนดค่าตัวแปรในระดับทั่วโลก"
    },
    {
        "ruleId": "no-implicit-coercion",
        "title": "ห้ามใช้การบังคับแปลงประเภทข้อมูลโดยอัตโนมัติ",
        "description": "ห้ามใช้การแปลงประเภทข้อมูลโดยอัตโนมัติ (implicit coercion) เช่น การใช้ `+` กับสตริงเพื่อแปลงตัวแปรเป็นสตริง หรือการใช้ `!!` เพื่อแปลงค่าต่างๆ เป็น boolean ซึ่งอาจทำให้โค้ดไม่ชัดเจนและเกิดข้อผิดพลาดได้ ควรใช้การแปลงประเภทข้อมูลอย่างชัดเจน เช่น `String()`, `Number()`, หรือ `Boolean()`",
        "message": "ห้ามใช้การบังคับแปลงประเภทข้อมูลโดยอัตโนมัติ"
    },
    {
        "ruleId": "no-extra-bind",
        "title": "ห้ามใช้การผูกฟังก์ชันซ้ำ (extra bind)",
        "description": "ห้ามใช้การผูกฟังก์ชันซ้ำ เช่น การใช้ `.bind()` ที่ไม่จำเป็น เนื่องจากมันอาจทำให้โค้ดยุ่งเหยิงและเพิ่มภาระในการทำงานให้กับโปรแกรม ควรใช้การผูกฟังก์ชันเพียงครั้งเดียวเท่าที่จำเป็น",
        "message": "ห้ามใช้การผูกฟังก์ชันซ้ำที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-extra-bind",
        "title": "ห้ามใช้การผูกฟังก์ชันซ้ำ (extra bind)",
        "description": "ห้ามใช้ `.bind()` ในกรณีที่ไม่จำเป็น เพราะการใช้ `.bind()` ซ้ำจะทำให้โค้ดยุ่งเหยิงและมีภาระการทำงานที่ไม่จำเป็น ควรใช้ฟังก์ชันเพียงครั้งเดียวและหลีกเลี่ยงการสร้างฟังก์ชันใหม่ที่มีการผูกตัวแปรซ้ำๆ",
        "message": "ห้ามใช้ `.bind()` ซ้ำที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-extra-boolean-cast",
        "title": "ห้ามใช้การแปลงเป็น boolean ที่ไม่จำเป็น",
        "description": "ห้ามใช้การแปลงเป็น boolean ที่ไม่จำเป็น เช่น การใช้ `Boolean()` หรือ `!!` ในการแปลงค่าที่เป็น boolean อยู่แล้ว ซึ่งอาจทำให้โค้ดดูซ้ำซ้อนและยากต่อการเข้าใจ ควรหลีกเลี่ยงการแปลงค่าเป็น boolean หากค่าดังกล่าวสามารถใช้ในการเปรียบเทียบหรือเช็คได้โดยตรง",
        "message": "ห้ามใช้การแปลงเป็น boolean ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-extra-label",
        "title": "ห้ามใช้ label ที่ไม่จำเป็นในโค้ด",
        "description": "ห้ามใช้ label ที่ไม่จำเป็น เช่น การใช้ `label` ใน `break` หรือ `continue` เนื่องจากมันอาจทำให้โค้ดซับซ้อนและยากต่อการอ่านและดูแลรักษา ควรหลีกเลี่ยงการใช้ label หากไม่จำเป็นจริงๆ",
        "message": "ห้ามใช้ label ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-global-assign",
        "title": "ห้ามกำหนดค่าตัวแปรทั่วโลก",
        "description": "ห้ามกำหนดค่าตัวแปรในระดับทั่วโลกโดยตรง เช่น การกำหนดค่าตัวแปรที่อยู่ใน `window` หรือ `global` เนื่องจากมันอาจทำให้เกิดผลกระทบที่ไม่คาดคิดในโค้ดที่ใช้ตัวแปรเดียวกัน ควรใช้วิธีการกำหนดค่าภายในฟังก์ชันหรือบล็อกที่มีขอบเขตชัดเจน",
        "message": "ห้ามกำหนดค่าตัวแปรในระดับทั่วโลก"
    },
    {
        "ruleId": "no-implicit-coercion",
        "title": "ห้ามใช้การบังคับแปลงประเภทข้อมูลโดยอัตโนมัติ",
        "description": "ห้ามใช้การแปลงประเภทข้อมูลโดยอัตโนมัติ (implicit coercion) เช่น การใช้ `+` กับสตริงเพื่อแปลงตัวแปรเป็นสตริง หรือการใช้ `!!` เพื่อแปลงค่าต่างๆ เป็น boolean ซึ่งอาจทำให้โค้ดไม่ชัดเจนและเกิดข้อผิดพลาดได้ ควรใช้การแปลงประเภทข้อมูลอย่างชัดเจน เช่น `String()`, `Number()`, หรือ `Boolean()`",
        "message": "ห้ามใช้การบังคับแปลงประเภทข้อมูลโดยอัตโนมัติ"
    },
    {
        "ruleId": "no-implicit-globals",
        "title": "ห้ามประกาศตัวแปรในระดับทั่วโลกโดยไม่ได้ตั้งใจ",
        "description": "ห้ามประกาศตัวแปรในระดับทั่วโลกโดยไม่ได้ตั้งใจ เช่น การประกาศตัวแปรในฟังก์ชันโดยไม่ใช้ `var`, `let`, หรือ `const` ซึ่งอาจทำให้ตัวแปรเหล่านั้นกลายเป็นตัวแปรทั่วโลกโดยไม่ตั้งใจ ควรใช้ `let`, `const`, หรือ `var` ในการประกาศตัวแปรเพื่อหลีกเลี่ยงปัญหานี้",
        "message": "ห้ามประกาศตัวแปรในระดับทั่วโลกโดยไม่ได้ตั้งใจ"
    },
    {
        "ruleId": "no-implied-eval",
        "title": "ห้ามใช้การประเมินค่าที่ไม่ชัดเจน (implied eval)",
        "description": "ห้ามใช้ฟังก์ชันที่อาจมีการประเมินค่าโดยไม่ตั้งใจ เช่น `setTimeout()`, `setInterval()`, หรือ `execScript()` ที่รับฟังก์ชันเป็นสตริง เนื่องจากมันสามารถใช้ `eval()` ภายในได้ ซึ่งอาจทำให้โค้ดเสี่ยงต่อปัญหาด้านความปลอดภัย ควรหลีกเลี่ยงการใช้ฟังก์ชันเหล่านี้และใช้วิธีการที่ปลอดภัยกว่า",
        "message": "ห้ามใช้ฟังก์ชันที่ประเมินค่าผ่านสตริง เช่น `setTimeout()`, `setInterval()`"
    },
    {
        "ruleId": "no-inline-comments",
        "title": "ห้ามใช้คอมเมนต์ในบรรทัดเดียว",
        "description": "ห้ามใช้คอมเมนต์ในบรรทัดเดียว (inline comments) เนื่องจากมันอาจทำให้โค้ดดูไม่สะอาดและยากต่อการอ่าน ควรใช้คอมเมนต์ในบรรทัดใหม่เพื่อเพิ่มความชัดเจนและทำให้โค้ดอ่านง่ายขึ้น",
        "message": "ห้ามใช้คอมเมนต์ในบรรทัดเดียว"
    },
    {
        "ruleId": "no-invalid-this",
        "title": "ห้ามใช้ `this` ในที่ที่ไม่เหมาะสม",
        "description": "ห้ามใช้ `this` ในบริบทที่ไม่เหมาะสม เช่น การใช้ `this` ในฟังก์ชันที่ไม่ใช่เมธอดของอ็อบเจ็กต์ หรือในฟังก์ชันที่ไม่ได้ผูกกับอ็อบเจ็กต์ ซึ่งอาจทำให้เกิดผลลัพธ์ที่ไม่คาดคิด เนื่องจากค่าของ `this` อาจไม่เป็นไปตามที่คาดหวังในบางกรณี ควรหลีกเลี่ยงการใช้ `this` นอกบริบทที่เหมาะสม",
        "message": "ห้ามใช้ `this` ในที่ที่ไม่เหมาะสม"
    },
    {
        "ruleId": "no-iterator",
        "title": "ห้ามใช้ `__iterator__`",
        "description": "ห้ามใช้ `__iterator__` เพราะมันเป็นคุณสมบัติที่ไม่ได้รับการสนับสนุนใน JavaScript สมัยใหม่และอาจทำให้โค้ดไม่สามารถทำงานในบางเบราว์เซอร์ได้ การใช้งานที่ดีที่สุดคือการใช้ `for...of` หรือ `Array.prototype.forEach()` แทน",
        "message": "ห้ามใช้ `__iterator__`"
    },
    {
        "ruleId": "no-label-var",
        "title": "ห้ามใช้ label กับตัวแปร",
        "description": "ห้ามใช้ label กับตัวแปรใน JavaScript เพราะมันสามารถทำให้โค้ดดูซับซ้อนและยากต่อการเข้าใจ การใช้ label สำหรับการควบคุมการทำงานของโปรแกรม (เช่น `break` หรือ `continue`) ควรใช้ในลูปหรือบล็อกที่เหมาะสมแทน",
        "message": "ห้ามใช้ label กับตัวแปร"
    },
    {
        "ruleId": "no-labels",
        "title": "ห้ามใช้ label ในการควบคุมโค้ด",
        "description": "ห้ามใช้ label ในการควบคุมการทำงานของโปรแกรม เช่น `break` หรือ `continue` เนื่องจากมันอาจทำให้โค้ดดูซับซ้อนและยากต่อการอ่านและดูแลรักษา ควรใช้วิธีอื่นในการควบคุมลูปหรือเงื่อนไข เช่น `return`, `continue` หรือ `break` โดยไม่ต้องใช้ label",
        "message": "ห้ามใช้ label ในการควบคุมการทำงานของโค้ด"
    },
    {
        "ruleId": "no-lone-blocks",
        "title": "ห้ามใช้บล็อกที่ไม่จำเป็น",
        "description": "ห้ามใช้บล็อกที่ไม่มีการดำเนินการใดๆ หรือบล็อกที่ไม่จำเป็น เช่น การใช้ `{}` ล้อมรอบคำสั่งเดียว ซึ่งจะทำให้โค้ดดูซับซ้อนและไม่มีประโยชน์ ควรลบบล็อกที่ไม่จำเป็นออกเพื่อให้โค้ดกระชับและอ่านง่ายขึ้น",
        "message": "ห้ามใช้บล็อกที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-lonely-if",
        "title": "ห้ามใช้ `if` ที่มีเพียงคำสั่งเดียว",
        "description": "ห้ามใช้ `if` ที่มีคำสั่งเดียวโดยไม่มีบล็อก `else` เพราะมันทำให้โค้ดดูซับซ้อนและยากต่อการเข้าใจ ควรใช้บล็อก `else` หรือปรับโค้ดให้ชัดเจนยิ่งขึ้นโดยไม่ต้องใช้ `if` โดยตรง",
        "message": "ห้ามใช้ `if` ที่มีเพียงคำสั่งเดียวโดยไม่มี `else`"
    },
    {
        "ruleId": "no-loop-func",
        "title": "ห้ามประกาศฟังก์ชันภายในลูป",
        "description": "ห้ามประกาศฟังก์ชันภายในลูป เพราะการประกาศฟังก์ชันใหม่ในแต่ละรอบของลูปอาจทำให้เกิดการใช้ทรัพยากรเกินความจำเป็น และทำให้โค้ดยากต่อการเข้าใจ ควรประกาศฟังก์ชันภายนอกลูปแทน",
        "message": "ห้ามประกาศฟังก์ชันภายในลูป"
    },
    {
        "ruleId": "no-magic-numbers",
        "title": "ห้ามใช้ตัวเลขลอย (magic numbers)",
        "description": "ห้ามใช้ตัวเลขลอยในโค้ด เช่น การใช้ตัวเลขที่ไม่มีคำอธิบายหรือตัวแปรกำหนดค่า เพราะมันทำให้โค้ดยากต่อการเข้าใจและดูแลรักษา ควรใช้ตัวแปรหรือค่าคงที่ที่มีความหมายแทนตัวเลขเหล่านั้น",
        "message": "ห้ามใช้ตัวเลขลอยในโค้ด"
    },
    {
        "ruleId": "no-multi-assign",
        "title": "ห้ามใช้การกำหนดค่าหลายตัวแปรในบรรทัดเดียว",
        "description": "ห้ามใช้การกำหนดค่าหลายตัวแปรในบรรทัดเดียว เพราะมันทำให้โค้ดอ่านยากและอาจทำให้เกิดข้อผิดพลาดได้ ควรกำหนดค่าตัวแปรแต่ละตัวในบรรทัดแยกต่างหากเพื่อให้โค้ดมีความชัดเจนและสามารถดีบักได้ง่าย",
        "message": "ห้ามใช้การกำหนดค่าหลายตัวแปรในบรรทัดเดียว"
    },
    {
        "ruleId": "no-multi-str",
        "title": "ห้ามใช้การสร้างสตริงหลายบรรทัดโดยตรง",
        "description": "ห้ามใช้การสร้างสตริงหลายบรรทัดโดยการใช้เครื่องหมาย `+` หรือการเขียนสตริงหลายบรรทัดในบรรทัดเดียว เนื่องจากมันอาจทำให้โค้ดยากต่อการอ่านและดูแลรักษา ควรใช้เทมเพลตลิตอรัล (template literals) ซึ่งช่วยให้การสร้างสตริงหลายบรรทัดชัดเจนและอ่านง่ายกว่า",
        "message": "ห้ามใช้การสร้างสตริงหลายบรรทัดโดยตรง"
    },
    {
        "ruleId": "no-negated-condition",
        "title": "ห้ามใช้เงื่อนไขที่มีการปฏิเสธ (negation) ที่ไม่จำเป็น",
        "description": "ห้ามใช้เงื่อนไขที่มีการปฏิเสธ (เช่น `!`) ในเงื่อนไขที่ไม่จำเป็น เพราะมันอาจทำให้โค้ดยากต่อการเข้าใจ ควรเขียนเงื่อนไขในรูปแบบที่เป็นบวกเพื่อให้โค้ดดูสะอาดและเข้าใจง่ายกว่า",
        "message": "ห้ามใช้เงื่อนไขที่มีการปฏิเสธที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-nested-ternary",
        "title": "ห้ามใช้ ternary operator ซ้อนกัน",
        "description": "ห้ามใช้ ternary operator ซ้อนกัน เพราะมันอาจทำให้โค้ดยากต่อการอ่านและเข้าใจ ควรใช้ `if-else` หรือแยก ternary operator ออกเป็นบรรทัดใหม่เพื่อให้โค้ดอ่านง่ายขึ้นและหลีกเลี่ยงความสับสน",
        "message": "ห้ามใช้ ternary operator ซ้อนกัน"
    },
    {
        "ruleId": "no-new",
        "title": "ห้ามใช้ `new` กับฟังก์ชันที่ไม่ได้เป็น constructor",
        "description": "ห้ามใช้ `new` กับฟังก์ชันที่ไม่ได้เป็น constructor เนื่องจากมันอาจทำให้เกิดข้อผิดพลาดที่ไม่คาดคิด เพราะ `new` จะพยายามสร้างอ็อบเจ็กต์จากฟังก์ชันที่อาจไม่ได้ออกแบบมาเพื่อการนี้ ควรใช้ `new` กับฟังก์ชันที่เป็น constructor เท่านั้น",
        "message": "ห้ามใช้ `new` กับฟังก์ชันที่ไม่ได้เป็น constructor"
    },
    {
        "ruleId": "no-new-func",
        "title": "ห้ามใช้ `new` กับฟังก์ชัน",
        "description": "ห้ามใช้ `new` กับฟังก์ชันที่เป็นฟังก์ชันทั่วไป (non-constructor functions) เพราะมันจะสร้างอ็อบเจ็กต์ที่ไม่จำเป็นและอาจทำให้โค้ดซับซ้อนและยากต่อการเข้าใจ ควรหลีกเลี่ยงการใช้ `new` กับฟังก์ชันที่ไม่ใช่ constructor และใช้ฟังก์ชันตามปกติ",
        "message": "ห้ามใช้ `new` กับฟังก์ชัน"
    },
    {
        "ruleId": "no-new-wrappers",
        "title": "ห้ามใช้ `new` กับตัวห่อหุ้ม (wrapper objects)",
        "description": "ห้ามใช้ `new` กับตัวห่อหุ้ม เช่น `new String()`, `new Number()`, หรือ `new Boolean()` เพราะมันจะสร้างอ็อบเจ็กต์แทนค่าพื้นฐานที่ไม่จำเป็น ซึ่งอาจทำให้โค้ดช้าลงและเกิดข้อผิดพลาดในการเปรียบเทียบ ควรใช้ค่าพื้นฐานโดยตรงแทนตัวห่อหุ้ม",
        "message": "ห้ามใช้ `new` กับตัวห่อหุ้ม (wrapper objects)"
    },
    {
        "ruleId": "no-nonoctal-decimal-escape",
        "title": "ห้ามใช้การหนีอักขระที่ไม่ใช่ค่าโค้ดฐานแปดในตัวเลขฐานสิบ",
        "description": "ห้ามใช้การหนีอักขระที่ไม่ใช่ค่าโค้ดฐานแปดในรูปแบบตัวเลขฐานสิบ เช่น `8` หรือ `9` ซึ่งไม่เป็นไปตามมาตรฐานของ JavaScript ควรใช้การหนีอักขระที่ถูกต้อง เช่น `x` หรือ `u` แทนเพื่อให้โค้ดทำงานได้ถูกต้อง",
        "message": "ห้ามใช้การหนีอักขระที่ไม่ใช่ค่าโค้ดฐานแปดในตัวเลขฐานสิบ"
    },
    {
        "ruleId": "no-object-constructor",
        "title": "ห้ามใช้ `Object` constructor",
        "description": "ห้ามใช้ `Object()` constructor ในการสร้างอ็อบเจ็กต์ เพราะมันไม่จำเป็นและทำให้โค้ดไม่ชัดเจน ควรใช้เครื่องหมาย `{}` ในการสร้างอ็อบเจ็กต์แทนเพื่อให้โค้ดกระชับและเข้าใจง่ายขึ้น",
        "message": "ห้ามใช้ `Object()` constructor"
    },
    {
        "ruleId": "no-octal",
        "title": "ห้ามใช้เลขฐานแปด (octal) ในโค้ด",
        "description": "ห้ามใช้เลขฐานแปดในรูปแบบที่ไม่ถูกต้อง เช่น `0x` หรือ `0` ในตัวเลขที่มีค่าเป็นฐานแปด ซึ่งอาจทำให้เกิดข้อผิดพลาดหรือพฤติกรรมที่ไม่คาดคิดในบางเบราว์เซอร์ ควรใช้รูปแบบตัวเลขที่ถูกต้องเพื่อหลีกเลี่ยงปัญหา",
        "message": "ห้ามใช้เลขฐานแปดในโค้ด"
    },
    {
        "ruleId": "no-octal-escape",
        "title": "ห้ามใช้การหนีอักขระในรูปแบบฐานแปด",
        "description": "ห้ามใช้การหนีอักขระในรูปแบบฐานแปด (เช่น `00`) เนื่องจากมันไม่เป็นไปตามมาตรฐาน ES6 และอาจทำให้เกิดพฤติกรรมที่ไม่คาดคิดในบางกรณี ควรใช้การหนีอักขระในรูปแบบที่ถูกต้อง เช่น `u` หรือ `x` แทน",
        "message": "ห้ามใช้การหนีอักขระในรูปแบบฐานแปด"
    },
    {
        "ruleId": "no-param-reassign",
        "title": "ห้ามเปลี่ยนแปลงค่าของพารามิเตอร์ในฟังก์ชัน",
        "description": "ห้ามเปลี่ยนแปลงค่าของพารามิเตอร์ในฟังก์ชัน เพราะมันอาจทำให้เกิดผลกระทบที่ไม่คาดคิดกับโค้ดที่เรียกใช้ฟังก์ชันนั้น ควรใช้ตัวแปรใหม่แทนการเปลี่ยนแปลงค่าพารามิเตอร์เพื่อให้โค้ดอ่านง่ายและมีความคาดเดาได้",
        "message": "ห้ามเปลี่ยนแปลงค่าของพารามิเตอร์ในฟังก์ชัน"
    },
    {
        "ruleId": "no-plusplus",
        "title": "ห้ามใช้ `++` หรือ `--` สำหรับการเพิ่มหรือลดค่า",
        "description": "ห้ามใช้ `++` หรือ `--` ในการเพิ่มหรือลดค่าตัวแปร เนื่องจากมันอาจทำให้โค้ดยากต่อการอ่านและทำความเข้าใจ ควรใช้การเพิ่มหรือลดค่าด้วยการดำเนินการทางคณิตศาสตร์ (`+= 1`, `-= 1`) เพื่อทำให้โค้ดชัดเจนและเข้าใจง่ายขึ้น",
        "message": "ห้ามใช้ `++` หรือ `--` สำหรับการเพิ่มหรือลดค่า"
    },
    {
        "ruleId": "no-proto",
        "title": "ห้ามใช้ `__proto__`",
        "description": "ห้ามใช้ `__proto__` เนื่องจากเป็นคุณสมบัติที่ไม่ได้รับการสนับสนุนอย่างเป็นทางการและอาจทำให้เกิดปัญหาด้านความเข้ากันได้ในบางเบราว์เซอร์ ควรใช้ `Object.getPrototypeOf()` และ `Object.setPrototypeOf()` แทนเพื่อให้โค้ดปลอดภัยและเข้ากันได้กับมาตรฐาน",
        "message": "ห้ามใช้ `__proto__`"
    },
    {
        "ruleId": "no-redeclare",
        "title": "ห้ามประกาศตัวแปรซ้ำ",
        "description": "ห้ามประกาศตัวแปรที่มีชื่อเดียวกันหลายครั้งในขอบเขตเดียวกัน เพราะมันอาจทำให้เกิดความสับสนและข้อผิดพลาดในโค้ด ควรใช้ชื่อที่แตกต่างกันสำหรับตัวแปรแต่ละตัว หรือใช้ `let` หรือ `const` เพื่อหลีกเลี่ยงการประกาศซ้ำ",
        "message": "ห้ามประกาศตัวแปรซ้ำในขอบเขตเดียวกัน"
    },
    {
        "ruleId": "no-regex-spaces",
        "title": "ห้ามใช้ช่องว่างใน regular expressions",
        "description": "ห้ามใช้ช่องว่างใน regular expressions โดยตรง เนื่องจากมันอาจทำให้เกิดความผิดพลาดในการจับคู่ข้อความ เพราะช่องว่างใน regex อาจทำให้เกิดการจับคู่ที่ไม่คาดคิด ควรใช้ `s` เพื่อแทนช่องว่างใน regex แทนการใช้ช่องว่างโดยตรง",
        "message": "ห้ามใช้ช่องว่างใน regular expressions"
    },
    {
        "ruleId": "no-restricted-exports",
        "title": "ห้ามใช้การส่งออกที่จำกัด",
        "description": "ห้ามใช้การส่งออกที่จำกัด (restricted exports) ในไฟล์โมดูล เพราะอาจทำให้โค้ดยากต่อการดูแลรักษาและขยาย ข้อจำกัดการส่งออกควรได้รับการกำหนดอย่างชัดเจน เพื่อให้การนำเข้าและส่งออกในโมดูลเป็นไปตามที่ต้องการ ควรกำหนดการส่งออกที่เหมาะสมและใช้วิธีการที่ปลอดภัยและยืดหยุ่น",
        "message": "ห้ามใช้การส่งออกที่จำกัด"
    },
    {
        "ruleId": "no-restricted-globals",
        "title": "ห้ามใช้ตัวแปร global ที่จำกัด",
        "description": "ห้ามใช้ตัวแปร global ที่ถูกจำกัด เช่น `event`, `name`, หรือ `status` เพราะมันอาจทำให้เกิดการขัดแย้งในโค้ดและยากต่อการตรวจสอบ ควรหลีกเลี่ยงการใช้ชื่อ global ที่สามารถเกิดการชนกันได้ และใช้ชื่อที่เป็นเฉพาะเจาะจงมากขึ้น",
        "message": "ห้ามใช้ตัวแปร global ที่จำกัด"
    },
    {
        "ruleId": "no-restricted-imports",
        "title": "ห้ามใช้การนำเข้าที่จำกัด",
        "description": "ห้ามใช้การนำเข้าที่จำกัดในไฟล์โมดูล เพราะอาจทำให้โค้ดยากต่อการดูแลรักษา และสามารถทำให้เกิดปัญหาในการบำรุงรักษาและการขยายตัว ควรกำหนดการนำเข้าที่เหมาะสมเพื่อหลีกเลี่ยงการใช้ไลบรารีหรือโมดูลที่ไม่ต้องการหรือไม่เหมาะสม",
        "message": "ห้ามใช้การนำเข้าที่จำกัด"
    },
    {
        "ruleId": "no-restricted-properties",
        "title": "ห้ามใช้คุณสมบัติที่จำกัด",
        "description": "ห้ามใช้คุณสมบัติที่ถูกจำกัดในอ็อบเจ็กต์หรือคลาส เพราะอาจทำให้เกิดพฤติกรรมที่ไม่คาดคิดหรือการเข้ากันไม่ได้กับส่วนอื่นของโค้ด ควรกำหนดคุณสมบัติที่สามารถใช้ได้อย่างเหมาะสมและปลอดภัย เพื่อหลีกเลี่ยงการใช้คุณสมบัติที่ไม่ปลอดภัยหรือไม่ได้รับการสนับสนุน",
        "message": "ห้ามใช้คุณสมบัติที่จำกัด"
    },
    {
        "ruleId": "no-restricted-syntax",
        "title": "ห้ามใช้ไวยากรณ์ที่จำกัด",
        "description": "ห้ามใช้ไวยากรณ์ที่จำกัดในโค้ด เช่น รูปแบบการเขียนที่ไม่ปลอดภัยหรือไม่เหมาะสม ซึ่งอาจทำให้โค้ดยากต่อการอ่านและบำรุงรักษา ควรกำหนดไวยากรณ์ที่เหมาะสมและสอดคล้องกับมาตรฐานที่ทีมงานหรือโปรเจกต์ได้ตกลงกันไว้",
        "message": "ห้ามใช้ไวยากรณ์ที่จำกัด"
    },
    {
        "ruleId": "no-return-assign",
        "title": "ห้ามใช้การกำหนดค่าในคำสั่ง `return`",
        "description": "ห้ามใช้การกำหนดค่าในคำสั่ง `return` เนื่องจากมันอาจทำให้โค้ดอ่านยากและเกิดข้อผิดพลาดที่ไม่คาดคิด ควรแยกการกำหนดค่าออกจากคำสั่ง `return` เพื่อเพิ่มความชัดเจนและความเข้าใจง่ายในโค้ด",
        "message": "ห้ามใช้การกำหนดค่าในคำสั่ง `return`"
    },
    {
        "ruleId": "no-script-url",
        "title": "ห้ามใช้ `javascript:` ในลิงก์",
        "description": "ห้ามใช้ `javascript:` ในลิงก์ URL เช่น `href='javascript:void(0)'` หรือ `href='javascript:...'` เพราะมันสามารถเปิดช่องทางให้โค้ด JavaScript ที่อาจไม่ปลอดภัยหรือไม่คาดคิดทำงานได้ ควรใช้วิธีการที่เหมาะสมกับการทำงานของลิงก์ เช่น การใช้ `event listeners` แทน",
        "message": "ห้ามใช้ `javascript:` ในลิงก์ URL"
    },
    {
        "ruleId": "no-sequences",
        "title": "ห้ามใช้เครื่องหมายคอมม่าในนิพจน์หลายรายการ",
        "description": "ห้ามใช้เครื่องหมายคอมม่า (`,`) ในการรวมหลายรายการในนิพจน์เดียว เพราะมันอาจทำให้โค้ดอ่านยากและเข้าใจผิดได้ ควรแยกนิพจน์แต่ละตัวให้อยู่ในบรรทัดหรือสโคปที่ชัดเจน เพื่อให้โค้ดอ่านง่ายและตรวจสอบได้ง่าย",
        "message": "ห้ามใช้เครื่องหมายคอมม่าในนิพจน์หลายรายการ"
    },
    {
        "ruleId": "no-shadow",
        "title": "ห้ามใช้ชื่อเดียวกันกับตัวแปรที่อยู่ในขอบเขตที่สูงกว่า",
        "description": "ห้ามใช้ชื่อเดียวกันกับตัวแปรที่มีอยู่ในขอบเขตที่สูงกว่า เช่น ตัวแปรในฟังก์ชันหรือบล็อก เนื่องจากมันอาจทำให้เกิดความสับสนและข้อผิดพลาดในการใช้งาน ควรใช้ชื่อที่แตกต่างกันสำหรับตัวแปรในแต่ละขอบเขตเพื่อป้องกันการทับซ้อนกัน",
        "message": "ห้ามใช้ชื่อเดียวกันกับตัวแปรในขอบเขตที่สูงกว่า"
    },
    {
        "ruleId": "no-shadow-restricted-names",
        "title": "ห้ามใช้ชื่อที่จำกัดในการประกาศตัวแปร",
        "description": "ห้ามใช้ชื่อที่ถูกจำกัด (เช่น `arguments`, `eval`) เป็นชื่อของตัวแปรในฟังก์ชันหรือบล็อก เพราะมันอาจทำให้เกิดข้อผิดพลาดหรือพฤติกรรมที่ไม่คาดคิดในโค้ด ควรหลีกเลี่ยงการใช้ชื่อที่สงวนไว้หรือมีความหมายพิเศษใน JavaScript",
        "message": "ห้ามใช้ชื่อที่จำกัดในการประกาศตัวแปร"
    },
    {
        "ruleId": "no-ternary",
        "title": "ห้ามใช้ `ternary operator` (เครื่องหมายสามทาง)",
        "description": "ห้ามใช้ `ternary operator` ในโค้ด เนื่องจากมันอาจทำให้โค้ดยากต่อการอ่านและเข้าใจ โดยเฉพาะในกรณีที่มีเงื่อนไขซับซ้อน ควรใช้ `if-else` แทนเพื่อเพิ่มความชัดเจนและความอ่านง่ายในโค้ด",
        "message": "ห้ามใช้ `ternary operator` ในโค้ด"
    },
    {
        "ruleId": "no-throw-literal",
        "title": "ห้ามใช้ค่าธรรมดา (literal) ในการโยนข้อผิดพลาด",
        "description": "ห้ามใช้ค่าธรรมดา เช่น สตริงหรือจำนวนในคำสั่ง `throw` เพื่อโยนข้อผิดพลาด เนื่องจากมันอาจทำให้ไม่สามารถจับข้อผิดพลาดได้อย่างถูกต้อง ควรใช้ `Error` หรือคลาสที่สืบทอดจาก `Error` แทนเพื่อให้โค้ดสามารถจัดการกับข้อผิดพลาดได้ดีกว่า",
        "message": "ห้ามใช้ค่าธรรมดา (literal) ในการโยนข้อผิดพลาด"
    },
    {
        "ruleId": "no-undef-init",
        "title": "ห้ามกำหนดค่าตัวแปรเป็น `undefined`",
        "description": "ห้ามกำหนดค่าตัวแปรเป็น `undefined` เพราะใน JavaScript ตัวแปรที่ไม่ได้กำหนดค่าจะมีค่าเป็น `undefined อยู่แล้ว` การกำหนดค่าเป็น `undefined` อาจทำให้โค้ดอ่านยากและไม่จำเป็น ควรหลีกเลี่ยงการกำหนดค่าให้ตัวแปรที่ยังไม่ได้ใช้งาน",
        "message": "ห้ามกำหนดค่าตัวแปรเป็น `undefined`"
    },
    {
        "ruleId": "no-undefined",
        "title": "ห้ามใช้ `undefined` ในโค้ด",
        "description": "ห้ามใช้ค่า `undefined` โดยตรงในโค้ด เพราะมันเป็นค่าที่ถูกกำหนดไว้ใน JavaScript อยู่แล้ว และการใช้ `undefined` โดยตรงอาจทำให้เกิดผลกระทบที่ไม่คาดคิด ควรใช้ `void 0` แทนการใช้ `undefined` เพื่อหลีกเลี่ยงการเข้าใจผิดและปัญหาการเขียนโค้ดที่ไม่ปลอดภัย",
        "message": "ห้ามใช้ `undefined` โดยตรงในโค้ด"
    },
    {
        "ruleId": "no-underscore-dangle",
        "title": "ห้ามใช้ขีดล่าง (underscore) ที่ท้ายชื่อของตัวแปรหรือฟังก์ชัน",
        "description": "ห้ามใช้ขีดล่าง (underscore) ที่ท้ายชื่อของตัวแปรหรือฟังก์ชัน เพราะมันอาจทำให้โค้ดอ่านยากและสับสน ปกติแล้วขีดล่างที่ท้ายชื่อจะใช้เพื่อบ่งบอกว่าตัวแปรหรือฟังก์ชันนั้นเป็นสิ่งที่ไม่ควรเข้าถึงโดยตรงหรือเป็นค่าภายใน ซึ่งทำให้โค้ดดูไม่ชัดเจน ควรหลีกเลี่ยงการใช้ขีดล่างที่ท้ายชื่อ",
        "message": "ห้ามใช้ขีดล่างที่ท้ายชื่อของตัวแปรหรือฟังก์ชัน"
    },
    {
        "ruleId": "no-unneeded-ternary",
        "title": "ห้ามใช้ `ternary operator` ที่ไม่จำเป็น",
        "description": "ห้ามใช้ `ternary operator` ที่ไม่จำเป็น เช่น ในกรณีที่เงื่อนไขของ `ternary` แค่เป็นการกำหนดค่าตัวแปรเดียวกันหรือไม่ต้องมีการเลือกเงื่อนไขใดๆ ควรใช้ `if-else` หรือการกำหนดค่าตัวแปรโดยตรงแทนเพื่อเพิ่มความชัดเจนและอ่านง่ายในโค้ด",
        "message": "ห้ามใช้ `ternary operator` ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-unused-expressions",
        "title": "ห้ามใช้คำสั่งที่ไม่มีผลลัพธ์ในโค้ด",
        "description": "ห้ามใช้คำสั่งที่ไม่มีผลลัพธ์ เช่น การใช้ฟังก์ชันหรือการคำนวณที่ไม่ได้กำหนดค่าให้กับตัวแปรหรือไม่ได้มีผลกระทบใดๆ ควรหลีกเลี่ยงการใช้คำสั่งที่ไม่มีประโยชน์เพื่อให้โค้ดสะอาดและเข้าใจง่าย",
        "message": "ห้ามใช้คำสั่งที่ไม่มีผลลัพธ์ในโค้ด"
    },
    {
        "ruleId": "no-unused-labels",
        "title": "ห้ามใช้ label ที่ไม่ได้ใช้งาน",
        "description": "ห้ามใช้ label ในโค้ดที่ไม่ได้ถูกอ้างอิงหรือใช้ เนื่องจากมันทำให้โค้ดดูรกและอาจสร้างความสับสน ควรลบ label ที่ไม่ได้ใช้เพื่อให้โค้ดสะอาดและอ่านง่าย",
        "message": "ห้ามใช้ label ที่ไม่ได้ใช้งาน"
    },
    {
        "ruleId": "no-useless-call",
        "title": "ห้ามใช้ `call()` หรือ `apply()` ที่ไม่จำเป็น",
        "description": "ห้ามใช้ `call()` หรือ `apply()` เมื่อไม่จำเป็น เช่น เมื่อสามารถเรียกฟังก์ชันโดยตรงได้โดยไม่ต้องใช้ `call()` หรือ `apply()` การใช้ฟังก์ชันเหล่านี้โดยไม่มีความจำเป็นจะทำให้โค้ดซับซ้อนและยากต่อการเข้าใจ ควรหลีกเลี่ยงการใช้ `call()` หรือ `apply()` ที่ไม่จำเป็น",
        "message": "ห้ามใช้ `call()` หรือ `apply()` ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-catch",
        "title": "ห้ามใช้ `catch` ที่ไม่จำเป็น",
        "description": "ห้ามใช้คำสั่ง `catch` โดยไม่ทำการประมวลผลข้อผิดพลาดใดๆ เช่น การจับข้อผิดพลาดและไม่ทำอะไรกับมัน การทำเช่นนี้ไม่ช่วยในการจัดการข้อผิดพลาดและทำให้โค้ดยากต่อการบำรุงรักษา ควรลบคำสั่ง `catch` ที่ไม่จำเป็นออกจากโค้ด",
        "message": "ห้ามใช้ `catch` ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-computed-key",
        "title": "ห้ามใช้คีย์ที่คำนวณผลที่ไม่จำเป็น",
        "description": "ห้ามใช้คีย์ที่คำนวณผลในอ็อบเจ็กต์เมื่อคีย์นั้นเป็นค่าคงที่หรือไม่จำเป็นต้องคำนวณ เช่น การใช้คีย์ที่มีค่าเหมือนกับตัวแปรในตัวอ็อบเจ็กต์โดยไม่ต้องคำนวณผล ควรใช้คีย์ตรงๆ โดยไม่ต้องใช้คำนวณเพื่อให้โค้ดอ่านง่ายขึ้น",
        "message": "ห้ามใช้คีย์ที่คำนวณผลที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-concat",
        "title": "ห้ามใช้การเชื่อมต่อสตริงที่ไม่จำเป็น",
        "description": "ห้ามใช้การเชื่อมต่อสตริง (`+`) เมื่อมันไม่จำเป็น เช่น การเชื่อมต่อสตริงกับค่าว่าง (`''`) หรือการเชื่อมต่อสตริงกับสตริงที่มีค่าเหมือนกัน ซึ่งจะทำให้โค้ดดูซับซ้อนและไม่จำเป็น ควรหลีกเลี่ยงการใช้การเชื่อมต่อที่ไม่มีประโยชน์ในโค้ด",
        "message": "ห้ามใช้การเชื่อมต่อสตริงที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-constructor",
        "title": "ห้ามใช้คอนสตรัคเตอร์ที่ไม่จำเป็น",
        "description": "ห้ามใช้คอนสตรัคเตอร์ที่ไม่ได้เพิ่มฟังก์ชันการทำงานใดๆ หรือแค่เรียกใช้คอนสตรัคเตอร์ของคลาสแม่โดยตรง คอนสตรัคเตอร์ที่ไม่จำเป็นจะทำให้โค้ดดูซับซ้อนและไม่สามารถปรับปรุงได้ ควรลบคอนสตรัคเตอร์ที่ไม่มีฟังก์ชันพิเศษออกไป",
        "message": "ห้ามใช้คอนสตรัคเตอร์ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-escape",
        "title": "ห้ามใช้การหนีที่ไม่จำเป็น",
        "description": "ห้ามใช้การหนี (escape characters) ที่ไม่จำเป็น เช่น การใช้ backslash ในตัวอักษรที่ไม่ต้องการการหนีหรือในสถานการณ์ที่สามารถใช้ได้โดยตรง การใช้การหนีที่ไม่จำเป็นจะทำให้โค้ดอ่านยากและสับสน ควรหลีกเลี่ยงการใช้การหนีที่ไม่จำเป็นในโค้ด",
        "message": "ห้ามใช้การหนีที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-rename",
        "title": "ห้ามใช้การเปลี่ยนชื่อที่ไม่จำเป็น",
        "description": "ห้ามใช้การเปลี่ยนชื่อของตัวแปรหรือฟังก์ชันที่ไม่จำเป็น เช่น การเปลี่ยนชื่อที่ไม่มีผลใดๆ หรือไม่มีการปรับปรุงในโค้ด การเปลี่ยนชื่อที่ไม่จำเป็นทำให้โค้ดยุ่งเหยิงและยากต่อการอ่าน ควรหลีกเลี่ยงการเปลี่ยนชื่อที่ไม่จำเป็น",
        "message": "ห้ามใช้การเปลี่ยนชื่อที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-useless-return",
        "title": "ห้ามใช้ `return` ที่ไม่จำเป็น",
        "description": "ห้ามใช้คำสั่ง `return` ที่ไม่จำเป็น เช่น การใช้ `return` ที่ไม่มีค่า หรือในฟังก์ชันที่ไม่ได้มีการทำงานอื่นๆ หลังจาก `return` การใช้ `return` ที่ไม่จำเป็นทำให้โค้ดยากต่อการอ่านและบำรุงรักษา ควรลบ `return` ที่ไม่จำเป็นออกจากโค้ด",
        "message": "ห้ามใช้ `return` ที่ไม่จำเป็น"
    },
    {
        "ruleId": "no-var",
        "title": "ห้ามใช้ `var`",
        "description": "ห้ามใช้ `var` เพื่อประกาศตัวแปรในโค้ด เนื่องจาก `var` อาจทำให้เกิดการกำหนดค่าใหม่หรือการใช้งานที่ไม่คาดคิดเนื่องจากการทำงานในขอบเขตที่ไม่คาดคิด ควรใช้ `let` หรือ `const` แทนการใช้ `var` เพื่อเพิ่มความชัดเจนและความปลอดภัยในโค้ด",
        "message": "ห้ามใช้ `var` เพื่อประกาศตัวแปร"
    },
    {
        "ruleId": "no-void",
        "title": "ห้ามใช้ `void`",
        "description": "ห้ามใช้ `void` ในการเรียกฟังก์ชันหรือแสดงผลลัพธ์ เพราะมันอาจทำให้โค้ดดูซับซ้อนและไม่จำเป็น การใช้ `void` โดยไม่มีเหตุผลอาจทำให้โค้ดเข้าใจยาก ควรหลีกเลี่ยงการใช้ `void` และใช้วิธีที่เหมาะสมในการจัดการผลลัพธ์จากฟังก์ชัน",
        "message": "ห้ามใช้ `void` ในการเรียกฟังก์ชันหรือแสดงผลลัพธ์"
    },
    {
        "ruleId": "no-warning-comments",
        "title": "ห้ามใช้คำเตือนในคอมเมนต์",
        "description": "ห้ามใช้คำเตือนในคอมเมนต์ เช่น `TODO`, `FIXME`, `XXX` ที่ไม่ได้มีการดำเนินการแก้ไขหรือจัดการทันที คำเตือนที่ค้างคาอาจทำให้โค้ดยากต่อการบำรุงรักษา ควรหลีกเลี่ยงการใช้คำเตือนในคอมเมนต์และควรดำเนินการแก้ไขโดยเร็ว",
        "message": "ห้ามใช้คำเตือนในคอมเมนต์"
    },
    {
        "ruleId": "no-with",
        "title": "ห้ามใช้ `with`",
        "description": "ห้ามใช้คำสั่ง `with` ในโค้ด เนื่องจาก `with` อาจทำให้เกิดความไม่ชัดเจนในการเข้าถึงตัวแปรและสามารถทำให้โค้ดเกิดปัญหาในการดีบักและทำงานไม่คาดคิด ควรหลีกเลี่ยงการใช้ `with` และใช้วิธีอื่นๆ เช่นการเข้าถึงคุณสมบัติของอ็อบเจ็กต์โดยตรง",
        "message": "ห้ามใช้คำสั่ง `with`"
    },
    {
        "ruleId": "object-shorthand",
        "title": "ใช้การเขียนอ็อบเจ็กต์ในรูปแบบย่อ",
        "description": "แนะนำให้ใช้การเขียนอ็อบเจ็กต์ในรูปแบบย่อ (shorthand) เมื่อชื่อของคีย์และตัวแปรเหมือนกัน การใช้รูปแบบย่อทำให้โค้ดกระชับและอ่านง่ายขึ้น เช่น ใช้ `{ prop }` แทน `{ prop: prop }`",
        "message": "ใช้การเขียนอ็อบเจ็กต์ในรูปแบบย่อเมื่อเป็นไปได้"
    },
    {
        "ruleId": "one-var",
        "title": "ใช้การประกาศตัวแปรในบรรทัดเดียวเท่านั้น",
        "description": "แนะนำให้ประกาศตัวแปรในบรรทัดเดียวกันเพื่อเพิ่มความกระชับและอ่านง่าย แต่ถ้าต้องการประกาศตัวแปรหลายตัวในบรรทัดเดียว ควรประกาศตัวแปรที่มีความสัมพันธ์กัน เพื่อหลีกเลี่ยงการประกาศตัวแปรที่ไม่จำเป็นหรือซ้ำซ้อนในหลายบรรทัด",
        "message": "ใช้การประกาศตัวแปรในบรรทัดเดียวเท่านั้น"
    },
    {
        "ruleId": "operator-assignment",
        "title": "ใช้การมอบหมายค่าโดยใช้ตัวดำเนินการมอบหมาย",
        "description": "แนะนำให้ใช้ตัวดำเนินการมอบหมาย (เช่น `+=`, `-=`, `*=`, `/=`) แทนการใช้ตัวดำเนินการทั่วไปในการมอบหมายค่าใหม่ ตัวดำเนินการมอบหมายทำให้โค้ดสั้นลงและอ่านง่ายขึ้น ตัวอย่างเช่นแทนที่จะเขียน `x = x + 1` ควรใช้ `x += 1`",
        "message": "ใช้ตัวดำเนินการมอบหมายแทนการมอบหมายค่าด้วยวิธีที่ยาวเกินไป"
    },
    {
        "ruleId": "prefer-arrow-callback",
        "title": "ใช้ฟังก์ชันแบบ arrow function แทนฟังก์ชันทั่วไป",
        "description": "แนะนำให้ใช้ฟังก์ชันแบบ arrow function (เช่น `() => {}`) แทนการใช้ฟังก์ชันทั่วไป เพราะฟังก์ชันแบบ arrow function มีความกระชับและสั้นกว่า นอกจากนี้ยังช่วยให้การเข้าถึง `this` ทำได้ง่ายและคาดเดาได้มากขึ้น",
        "message": "ใช้ฟังก์ชันแบบ arrow function แทนฟังก์ชันทั่วไป"
    },
    {
        "ruleId": "prefer-const",
        "title": "ใช้ `const` แทน `let` หากตัวแปรไม่ถูกเปลี่ยนค่า",
        "description": "แนะนำให้ใช้ `const` แทน `let` เมื่อประกาศตัวแปรที่ไม่ถูกเปลี่ยนค่าในภายหลัง การใช้ `const` ช่วยให้โค้ดมีความชัดเจนและปลอดภัยมากขึ้น เนื่องจากตัวแปรที่ประกาศด้วย `const` จะไม่สามารถถูกกำหนดค่าใหม่ได้ ซึ่งช่วยลดความผิดพลาดในโค้ด",
        "message": "ใช้ `const` แทน `let` หากตัวแปรไม่ถูกเปลี่ยนค่า"
    },
    {
        "ruleId": "prefer-destructuring",
        "title": "ใช้การแยกค่า (destructuring) แทนการเข้าถึงค่าแบบเดิม",
        "description": "แนะนำให้ใช้การแยกค่า (destructuring) เพื่อดึงข้อมูลจากอ็อบเจ็กต์หรืออาร์เรย์แทนการเข้าถึงค่าโดยตรง ซึ่งจะช่วยให้โค้ดอ่านง่ายและกระชับขึ้น ตัวอย่างเช่น แทนที่จะเขียน `const name = person.name;` ควรใช้ `const { name } = person;`",
        "message": "ใช้การแยกค่า (destructuring) แทนการเข้าถึงค่าแบบเดิม"
    },
    {
        "ruleId": "prefer-exponentiation-operator",
        "title": "ใช้ตัวดำเนินการยกกำลัง (Exponentiation Operator) แทนการใช้ `Math.pow()`",
        "description": "แนะนำให้ใช้ตัวดำเนินการยกกำลัง (`**`) แทนการใช้ `Math.pow()` เพราะมันช่วยให้โค้ดกระชับและอ่านง่ายขึ้น ตัวอย่างเช่น แทนที่จะเขียน `Math.pow(2, 3)` ควรใช้ `2 ** 3`",
        "message": "ใช้ตัวดำเนินการยกกำลัง (Exponentiation Operator) แทนการใช้ `Math.pow()`"
    },
    {
        "ruleId": "prefer-named-capture-group",
        "title": "ใช้ Named Capture Groups แทนการใช้เลขดัชนีในการจับกลุ่มใน RegExp",
        "description": "แนะนำให้ใช้ Named Capture Groups ใน Regular Expressions แทนการใช้เลขดัชนีในการจับกลุ่ม (เช่น `(?<name>...)`) เพราะจะช่วยให้โค้ดอ่านง่ายและบำรุงรักษาได้ง่ายขึ้น โดยสามารถเข้าถึงค่าที่จับกลุ่มได้จากชื่อที่มีความหมายแทนการใช้ดัชนี",
        "message": "ใช้ Named Capture Groups แทนการใช้เลขดัชนีในการจับกลุ่มใน RegExp"
    },
    {
        "ruleId": "prefer-numeric-literals",
        "title": "ใช้ตัวเลขในรูปแบบลิตอรัล (numeric literals) แทนการใช้ `Number()`",
        "description": "แนะนำให้ใช้ตัวเลขในรูปแบบลิตอรัล (เช่น `10`, `3.14`, `0xFF`) แทนการใช้ `Number()` หรือฟังก์ชันอื่นๆ สำหรับการแปลงค่าตัวเลข เพราะมันทำให้โค้ดกระชับและเข้าใจได้ง่ายขึ้น",
        "message": "ใช้ตัวเลขในรูปแบบลิตอรัล (numeric literals) แทนการใช้ `Number()`"
    },
    {
        "ruleId": "prefer-object-has-own",
        "title": "ใช้ `Object.prototype.hasOwn()` แทนการใช้ `hasOwnProperty()`",
        "description": "แนะนำให้ใช้ `Object.prototype.hasOwn()` แทนการใช้ `hasOwnProperty()` เมื่อเช็คว่าคีย์อยู่ในอ็อบเจ็กต์หรือไม่ เพราะ `Object.prototype.hasOwn()` เป็นวิธีที่ทันสมัยและปลอดภัยมากกว่าในกรณีที่อ็อบเจ็กต์อาจจะมีการแก้ไข prototype chain ของมัน",
        "message": "ใช้ `Object.prototype.hasOwn()` แทนการใช้ `hasOwnProperty()`"
    },
    {
        "ruleId": "prefer-object-spread",
        "title": "ใช้ Object Spread Syntax แทนการใช้ `Object.assign()`",
        "description": "แนะนำให้ใช้ Object Spread Syntax (เช่น `{ ...obj }`) แทนการใช้ `Object.assign()` เพื่อคัดลอกหรือผสานอ็อบเจ็กต์ เพราะ Object Spread Syntax กระชับและอ่านง่ายกว่า และยังช่วยให้โค้ดมีความชัดเจนมากขึ้นในบางกรณี",
        "message": "ใช้ Object Spread Syntax แทนการใช้ `Object.assign()`"
    },
    {
        "ruleId": "prefer-promise-reject-errors",
        "title": "ใช้ข้อผิดพลาดในการปฏิเสธ Promise แทนการใช้ค่าปกติ",
        "description": "แนะนำให้ใช้ข้อผิดพลาด (Error) แทนการใช้ค่าปกติใน `Promise.reject()` เพื่อให้โค้ดมีความชัดเจนในการจัดการข้อผิดพลาด โดยการใช้ข้อผิดพลาดสามารถช่วยให้การดีบักง่ายขึ้นและทำให้โค้ดมีความปลอดภัยมากขึ้น",
        "message": "ใช้ข้อผิดพลาดในการปฏิเสธ Promise แทนการใช้ค่าปกติ"
    },
    {
        "ruleId": "prefer-regex-literals",
        "title": "ใช้ Regex literals แทนการใช้ `RegExp` constructor",
        "description": "แนะนำให้ใช้ Regex literals (เช่น `/pattern/`) แทนการใช้ `RegExp` constructor (เช่น `new RegExp('pattern')`) เพราะ Regex literals จะช่วยให้โค้ดกระชับและอ่านง่ายขึ้น และยังสามารถจับข้อผิดพลาดได้ในระหว่างการเขียนโค้ดได้ง่ายกว่า",
        "message": "ใช้ Regex literals แทนการใช้ `RegExp` constructor"
    },
    {
        "ruleId": "prefer-rest-params",
        "title": "ใช้ `rest` parameter แทนการใช้ `arguments`",
        "description": "แนะนำให้ใช้ `rest` parameter (เช่น `...args`) แทนการใช้ `arguments` เพื่อรับพารามิเตอร์ที่ไม่ระบุจำนวนล่วงหน้าในฟังก์ชัน การใช้ `rest` parameter ช่วยให้โค้ดอ่านง่ายขึ้นและมีความปลอดภัยสูงขึ้น เนื่องจากสามารถระบุประเภทของพารามิเตอร์ได้อย่างชัดเจน",
        "message": "ใช้ `rest` parameter แทนการใช้ `arguments`"
    },
    {
        "ruleId": "prefer-spread",
        "title": "ใช้ Spread syntax แทนการใช้ `apply()`",
        "description": "แนะนำให้ใช้ Spread syntax (เช่น `...args`) แทนการใช้ `apply()` เมื่อส่งอาร์เรย์เป็นอาร์กิวเมนต์ในฟังก์ชัน เพราะ Spread syntax ช่วยให้โค้ดกระชับและอ่านง่ายกว่า และยังทำให้โค้ดดูทันสมัยและปลอดภัยยิ่งขึ้น",
        "message": "ใช้ Spread syntax แทนการใช้ `apply()`"
    },
    {
        "ruleId": "prefer-template",
        "title": "ใช้ Template literals แทนการใช้การเชื่อมสตริงด้วยเครื่องหมายบวก",
        "description": "แนะนำให้ใช้ Template literals (เช่น `` `Hello, ${name}` ``) แทนการใช้การเชื่อมสตริงด้วยเครื่องหมายบวก (`+`) เพราะ Template literals ช่วยให้โค้ดอ่านง่ายและกระชับขึ้น โดยสามารถรวมค่าตัวแปรภายในสตริงได้อย่างสะดวกและมีความยืดหยุ่นมากกว่า",
        "message": "ใช้ Template literals แทนการเชื่อมสตริงด้วยเครื่องหมายบวก"
    },
    {
        "ruleId": "radix",
        "title": "ใช้ `parseInt()` พร้อมระบุฐานเลข (radix)",
        "description": "แนะนำให้ใช้ `parseInt()` พร้อมระบุฐานเลข (radix) เพื่อป้องกันความไม่แน่นอนในผลลัพธ์ของการแปลงสตริงเป็นจำนวน เช่น ควรใช้ `parseInt('10', 10)` แทน `parseInt('10')` ซึ่งอาจเกิดผลลัพธ์ที่ไม่คาดคิดตามข้อกำหนดของ JavaScript ในบางกรณี เช่น การแปลงเลขฐาน 8 โดยไม่ตั้งใจ",
        "message": "ใช้ `parseInt()` พร้อมระบุฐานเลข (radix)"
    },
    {
        "ruleId": "require-await",
        "title": "ต้องมี `await` ในฟังก์ชันที่ประกาศเป็น `async`",
        "description": "แนะนำให้ใช้คำสั่ง `await` ในฟังก์ชันที่ประกาศเป็น `async` เพื่อหลีกเลี่ยงการใช้ `async` ฟังก์ชันโดยไม่จำเป็น ซึ่งอาจทำให้เกิดความสับสนในโค้ดและไม่สามารถใช้ประโยชน์จากความสามารถของ `async/await` ได้อย่างเต็มที่",
        "message": "ต้องมี `await` ในฟังก์ชันที่ประกาศเป็น `async`"
    },
    {
        "ruleId": "require-unicode-regexp",
        "title": "ใช้ Unicode flag (`u`) ใน Regular Expression เมื่อใช้อักษร Unicode",
        "description": "แนะนำให้ใช้ Unicode flag (`u`) ใน Regular Expression เพื่อให้รองรับตัวอักษร Unicode ได้อย่างถูกต้องและสมบูรณ์ การใช้ flag นี้จะช่วยให้สามารถจับคู่กับตัวอักษรที่อยู่ใน Unicode range ที่กว้างขึ้น รวมถึงอักขระพิเศษที่ไม่ใช่ ASCII ได้",
        "message": "ใช้ Unicode flag (`u`) ใน Regular Expression เมื่อใช้อักษร Unicode"
    },
    {
        "ruleId": "require-yield",
        "title": "ต้องใช้ `yield` ในฟังก์ชัน generator",
        "description": "แนะนำให้ใช้คำสั่ง `yield` ในฟังก์ชันที่ประกาศเป็น generator (โดยใช้ `function*`) เพื่อหลีกเลี่ยงการใช้ generator ฟังก์ชันโดยไม่จำเป็น ซึ่งอาจทำให้เกิดความสับสนหรือทำให้ฟังก์ชันไม่ทำงานตามที่คาดหวัง เนื่องจากฟังก์ชัน generator ต้องการ `yield` เพื่อระงับและส่งค่าผลลัพธ์",
        "message": "ต้องใช้ `yield` ในฟังก์ชัน generator"
    },
    {
        "ruleId": "sort-imports",
        "title": "เรียงลำดับคำสั่ง import ให้ถูกต้อง",
        "description": "แนะนำให้เรียงลำดับคำสั่ง `import` เพื่อให้โค้ดอ่านง่ายและมีระเบียบ โดยทั่วไปแล้วควรจัดลำดับการ import เป็นกลุ่มๆ เช่น การ import จากโมดูลภายนอกก่อน แล้วตามด้วยการ import ภายในโปรเจ็กต์ เพื่อความชัดเจนและทำให้โค้ดดูสะอาดตา",
        "message": "เรียงลำดับคำสั่ง `import` ให้ถูกต้อง"
    },
    {
        "ruleId": "sort-keys",
        "title": "เรียงลำดับคีย์ในอ็อบเจ็กต์ให้เป็นระเบียบ",
        "description": "แนะนำให้เรียงลำดับคีย์ในอ็อบเจ็กต์ให้เป็นระเบียบเพื่อเพิ่มความอ่านง่ายและทำให้โค้ดดูสะอาดตามากขึ้น การจัดลำดับคีย์ช่วยให้สามารถค้นหาและแก้ไขค่าภายในอ็อบเจ็กต์ได้สะดวกยิ่งขึ้น",
        "message": "เรียงลำดับคีย์ในอ็อบเจ็กต์ให้เป็นระเบียบ"
    },
    {
        "ruleId": "sort-vars",
        "title": "เรียงลำดับตัวแปรตามลำดับที่กำหนด",
        "description": "แนะนำให้เรียงลำดับการประกาศตัวแปรให้เป็นระเบียบ เพื่อเพิ่มความชัดเจนและทำให้โค้ดอ่านง่ายขึ้น การจัดลำดับตัวแปรช่วยให้สามารถค้นหาตัวแปรที่ต้องการได้ง่ายขึ้นและทำให้โค้ดมีความเป็นระเบียบ",
        "message": "เรียงลำดับตัวแปรตามลำดับที่กำหนด"
    },
    {
        "ruleId": "strict",
        "title": "ใช้โหมด Strict (`'use strict';`) ในทุกไฟล์ JavaScript",
        "description": "แนะนำให้เปิดใช้งานโหมด Strict ด้วยการใส่ `'use strict';` ในไฟล์ JavaScript ทุกไฟล์ เพื่อบังคับให้โค้ดปฏิบัติตามกฎที่เข้มงวดมากขึ้น เช่น การห้ามใช้ตัวแปรที่ไม่ได้ประกาศ การห้ามใช้คำสำคัญบางคำ และช่วยตรวจจับข้อผิดพลาดที่อาจเกิดขึ้นในการพัฒนาได้เร็วขึ้น",
        "message": "ใช้โหมด Strict (`'use strict';`) ในทุกไฟล์ JavaScript"
    },
    {
        "ruleId": "symbol-description",
        "title": "ให้คำอธิบาย (description) สำหรับ `Symbol` ทุกตัว",
        "description": "แนะนำให้ใส่คำอธิบาย (description) ให้กับ `Symbol` ทุกตัว เพื่อให้โค้ดอ่านง่ายและเข้าใจได้ดีขึ้น โดยการใช้คำอธิบายสามารถช่วยให้สามารถระบุและทำความเข้าใจ `Symbol` ได้ง่ายขึ้นเมื่อดีบักหรือทำงานร่วมกับโค้ดในอนาคต",
        "message": "ให้คำอธิบาย (description) สำหรับ `Symbol` ทุกตัว"
    },
    {
        "ruleId": "vars-on-top",
        "title": "ประกาศตัวแปรให้เป็นลำดับแรกในฟังก์ชัน",
        "description": "แนะนำให้ประกาศตัวแปรทั้งหมดในฟังก์ชันหรือบล็อกให้เป็นลำดับแรก เพื่อให้โค้ดมีความชัดเจนและป้องกันข้อผิดพลาดที่อาจเกิดจากการเข้าถึงตัวแปรก่อนที่จะประกาศ ตัวแปรทั้งหมดควรถูกประกาศก่อนที่มีการใช้งานในฟังก์ชัน",
        "message": "ประกาศตัวแปรให้เป็นลำดับแรกในฟังก์ชัน"
    },
    {
        "ruleId": "yoda",
        "title": "ใช้ลำดับตัวแปรในเงื่อนไขแบบปกติ ไม่ใช่แบบ Yoda",
        "description": "แนะนำให้ใช้ลำดับตัวแปรในเงื่อนไขแบบปกติ (เช่น `if (a === b)`) แทนการใช้แบบ Yoda (เช่น `if (b === a)`) เพื่อเพิ่มความชัดเจนในการอ่านโค้ด และลดความสับสนที่อาจเกิดขึ้นจากการสลับตำแหน่งของตัวแปรและค่าที่เปรียบเทียบ",
        "message": "ใช้ลำดับตัวแปรในเงื่อนไขแบบปกติ ไม่ใช่แบบ Yoda"
    },
    {
        "ruleId": "unicode-bom",
        "title": "กำหนดให้มี Unicode BOM (Byte Order Mark) สำหรับไฟล์ที่มีอักขระ Unicode",
        "description": "แนะนำให้ใช้ Unicode BOM (Byte Order Mark) สำหรับไฟล์ที่ใช้ตัวอักษร Unicode เพื่อให้โปรแกรมหรือเครื่องมือที่อ่านไฟล์รู้ว่าไฟล์นั้นใช้การเข้ารหัสแบบ Unicode ซึ่งช่วยป้องกันปัญหาการแสดงผลที่ไม่ถูกต้องเมื่อเปิดไฟล์ในโปรแกรมที่ไม่รองรับ Unicode โดยเฉพาะในระบบหรือเครื่องมือที่อาจไม่สามารถตรวจจับการเข้ารหัสได้เอง",
        "message": "กำหนดให้มี Unicode BOM (Byte Order Mark) สำหรับไฟล์ที่มีอักขระ Unicode"
    }
]